<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal</title>
    <link>/</link>
    <description>Recent content on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Feb 2024 13:51:03 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>So You Want to Functional Programming (Part III)</title>
      <link>/posts/so-you-want-to-fp-iii/</link>
      <pubDate>Thu, 22 Feb 2024 13:51:03 +0900</pubDate>
      
      <guid>/posts/so-you-want-to-fp-iii/</guid>
      <description>Part I Part II Part III Composing with side-effects Now. If you have thought that the FP guys are crazy, hopefully you&amp;rsquo;re going to end up with a ton of evidence on your hands to finally lock us away into the depths of the abyss, where we truly belong. Or you might have discovered something new, interesting and useful, which, you know, is also good.
There are three things that make functional programming as functional as it gets (or not):</description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp/&#34;&gt;Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-ii/&#34;&gt;Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part III&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;composing-with-side-effects&#34;&gt;Composing with side-effects&lt;/h1&gt;
&lt;p&gt;Now.
If you have thought that the FP guys are crazy, hopefully you&amp;rsquo;re going to end up with a ton of evidence on your hands to finally lock us away into the depths of the abyss, where we truly belong.
Or you might have discovered something new, interesting and useful, which, you know, is also good.&lt;/p&gt;
&lt;p&gt;There are three things that make functional programming as functional as it gets (or not):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Immutability&lt;/li&gt;
&lt;li&gt;Composition&lt;/li&gt;
&lt;li&gt;Purity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Different languages tend to pull on those different things in different proportions.
For example Lisp allows you to do side-effects and mutate variables.
Clojure on the other hand is all about immutability.
Haskell is about managing those side-effects and maintaining purity.
And OCaml is like, let me just code the way I want: it can be highly functional and pure, but can also code loose and dirty, with mutation and in imperative style.&lt;/p&gt;
&lt;p&gt;But then again, there are things that are really important across the languages: composability.&lt;/p&gt;
&lt;p&gt;Hopefully from the previous experiences you&amp;rsquo;ve realized that the composability is a good thing and actually helps us to write simpler code: if you can actually write your code in terms of simpler functions that are composable, this is what you would do instead of writing a wall of code and keeping that state in your head all the time.&lt;/p&gt;
&lt;p&gt;However, hopefully that you&amp;rsquo;ve also realized that composition works nicely if the functions are &lt;em&gt;pure&lt;/em&gt;.
To maintain some sense of purity, you need &lt;em&gt;immutability&lt;/em&gt;: you can&amp;rsquo;t have values changing suddenly underneath you.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why those things are important and why references are dangerous.
If you don&amp;rsquo;t manage those things, then the simple act of composing will make the debugging difficult.
You won&amp;rsquo;t be able to know what to trust, not much better than the imperative or OOP style.&lt;/p&gt;
&lt;p&gt;So okay, you&amp;rsquo;ll try to keep your functions pure to keep them composable.
But what if you have to compose functions that &lt;em&gt;do have&lt;/em&gt; side-effects?&lt;/p&gt;
&lt;p&gt;Well, luckily for you, there are people much smarter than you and I, who are paid to solve those kinds of problems, and their solutions are then integrated into languages or thrown to the side with many people not understanding why the hell do they need a PhD to write a &lt;code&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt; to the console.&lt;/p&gt;
&lt;p&gt;So we will start simple, and hopefully you&amp;rsquo;ll see the beauty.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the simple act of getting an Nth element in the list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_nth&lt;/span&gt;(l, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l[n]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, the code is simple, right?
Time to go home?&lt;/p&gt;
&lt;p&gt;There are obvious problems that you may also see: what if the Nth element doesn&amp;rsquo;t exist?
Well, let&amp;rsquo;s strengthen our code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_nth&lt;/span&gt;(l, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l[n]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, now the function doesn&amp;rsquo;t raise an exception if the Nth element doesn&amp;rsquo;t exist.
But what happens instead?
If we try to use that element, we will get another type of exception: something to do with &lt;code&gt;NoneType&lt;/code&gt;.
How do you handle that?&lt;/p&gt;
&lt;p&gt;At this point most people (including naive and young me) would just say &amp;ldquo;Fuck it&amp;rdquo; and code around this limitation, while keeping it in mind.&lt;/p&gt;
&lt;p&gt;In the end, we have some specific goal in mind, not just a function that needs to access some Nth element.
And so we would write around that limitation and we would achieve our goal.&lt;/p&gt;
&lt;p&gt;And all would be nice if that was a throwaway script.
However more often than not, the code would become a part of a critical infrastructure.
A ton more code would be written on top of that code, making it more difficult and more dangerous to change the code.&lt;/p&gt;
&lt;p&gt;My single &lt;code&gt;F&lt;/code&gt; in the whole undergraduate degree came from the course where I had to choose an open-source project and contribute to it.
I made a grave mistake to take my favorite Python project: Deluge.
Needless to say, I couldn&amp;rsquo;t make head nor tail of the project, and so I didn&amp;rsquo;t do anything.&lt;/p&gt;
&lt;p&gt;So, if the code is bad, it can get really bad.
What would happen first is that you would write a solution for a specific situation.
And then you would need to change it a little.
And then a little more.
Then you would encounter more and more problems, because you&amp;rsquo;re now breaking your invariants that existed only in your head (and not in your type system).
And now simple code that resembled a &amp;ldquo;happy path&amp;rdquo; looks like an amalgamation of &lt;code&gt;if&lt;/code&gt;s, &lt;code&gt;try/catch&lt;/code&gt; and many more.
And still it is a highly brittle code, a.k.a. legacy code.&lt;/p&gt;
&lt;p&gt;Now, the million-dollar question: why is that the case?&lt;/p&gt;
&lt;p&gt;Well, we know that it wasn&amp;rsquo;t the case with pure functions.
Pure functions can be substituted by a single value.
We opened a pandora&amp;rsquo;s box when we tried to work with &lt;em&gt;impure&lt;/em&gt; functions, or those that have side-effects that are unaccounted for.&lt;/p&gt;
&lt;p&gt;On a side-note, the funny thing that would happen at this stage is that people would:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hear that the functional programming is well-equipped with solving those kinds of problems,&lt;/li&gt;
&lt;li&gt;try out the FP concepts without understanding then&lt;/li&gt;
&lt;li&gt;half-assing them&lt;/li&gt;
&lt;li&gt;would make even more mess&lt;/li&gt;
&lt;li&gt;and then say that it is bad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, there is some required background in CS.
But more importantly, there&amp;rsquo;s a specific mindset that is required when doing functional programming.
FP has tendency to push you towards the right direction, but without the understanding, it would be for naught.&lt;/p&gt;
&lt;p&gt;But what would functional programmer would think when writing a code like that?&lt;/p&gt;
&lt;p&gt;Well.
The first thing is that the question would be: &amp;ldquo;Why are we writing a function that would need to access the Nth element?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;And the answer is: &amp;ldquo;We don&amp;rsquo;t know&amp;rdquo;.
In fact, this function is really generic.
It can be used for any reason.
It is the same question as to why you would use the word &amp;ldquo;long&amp;rdquo;?
Of course, you would use it to say that something is long.
But you could also say that something is &lt;em&gt;longing&lt;/em&gt; for something.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t just take the word and shoehorn it into a specific domain.
In that way, you can&amp;rsquo;t just take a generic function and assign it implicit assumptions and hope that they won&amp;rsquo;t get broken, because they most certainly will.&lt;/p&gt;
&lt;p&gt;Side-effects are those implicit assumptions.
In our &lt;code&gt;get_nth(l, n)&lt;/code&gt;, the assumption was that &lt;code&gt;n &amp;lt; len(l)&lt;/code&gt;.
We know that everything is going to work if the assumption is correct.
The problem is that we don&amp;rsquo;t know what would happen if the assumption is &lt;em&gt;incorrect&lt;/em&gt;.
And usually what happens is the worst.&lt;/p&gt;
&lt;p&gt;Usually it is very difficult to debug, because something that was deemed impossible happens.&lt;/p&gt;
&lt;p&gt;For that reason when functional programmers write code, they write it with the idea in mind of what is it they are in fact doing.
The reality is getting in the way.
If the programming language has a strong and expressive type system, then basically programmers can write code as if they are writing a mathematical proof that their code is correct.
If not, then, well, you deal with what you have and hope you have good discipline.&lt;/p&gt;
&lt;p&gt;So, the question is, how do we deal with side-effects?&lt;/p&gt;
&lt;p&gt;The answer is: head-on.
Let&amp;rsquo;s make the side-effects explicit.&lt;/p&gt;
&lt;p&gt;Again, there are several ways of doing what I am going to do, but what I&amp;rsquo;m going to show you is the poor man&amp;rsquo;s monads (yeah, those dreaded monads), so that in case of anything, you can at least manage to do something.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s get back to our example of &lt;code&gt;get_nth()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_nth&lt;/span&gt;(l, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l[n]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, in a good case, we have our value.
But in a bad case we have to deal with it somehow.
But we can&amp;rsquo;t give anything, because there&amp;rsquo;s nothing.
So let&amp;rsquo;s give &lt;code&gt;nothing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_nth&lt;/span&gt;(l, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; some(l[n])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; none()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how the functional programmers would do it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m pretty sure you&amp;rsquo;re interested in what &lt;code&gt;some()&lt;/code&gt; and &lt;code&gt;none()&lt;/code&gt; do.
Well, they are simple, but it is not so much important as to what they are, but how they must be used.&lt;/p&gt;
&lt;p&gt;Here are their definitions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;some&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some&amp;#39;&lt;/span&gt;, x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;none&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Those are the simple tuples.
We will keep our data structures simple.&lt;/p&gt;
&lt;p&gt;What we did here, is (implicitly) defined our own type.
This type is sometimes called &lt;code&gt;Option&lt;/code&gt;, sometimes &lt;code&gt;Maybe&lt;/code&gt;.
But the idea is that this type represents two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Something&lt;/code&gt; exists&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nothing&lt;/code&gt; exists&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we can wrap the value into our &lt;code&gt;Option&lt;/code&gt; type.
To extract it, we can write an extractor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value_of&lt;/span&gt;(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; opt[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would work as expected in case of &lt;code&gt;Some&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(value_of(some(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There is some value!&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we would have the same problem in case of &lt;code&gt;None&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(value_of(none())) &lt;span style=&#34;color:#75715e&#34;&gt;# throws exception&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we came back to our problem.&lt;/p&gt;
&lt;p&gt;At this point people would give up on FP, saying it is useless.
But what can we do?&lt;/p&gt;
&lt;p&gt;Well, it is clear that you&amp;rsquo;re not supposed to work with the underlying representation.
First thing you can do is check if the value is &lt;code&gt;Some&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_some&lt;/span&gt;(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; opt[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can try to extract value from &lt;code&gt;Some&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_value&lt;/span&gt;(opt, default_value):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_some(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value_of(opt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; default_value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is better, because it forces us to come up with the default value in case the our option value is actually &lt;code&gt;None&lt;/code&gt;.
But this approach requires a discipline.
You must use &lt;code&gt;extract_value()&lt;/code&gt; whenever you&amp;rsquo;re working with &lt;code&gt;Option&lt;/code&gt; types and not use the underlying structure.
Also, it is not so easy to come up with the default value in each and every case.&lt;/p&gt;
&lt;p&gt;There must be a better option.
Instead of extracting the value from the &lt;code&gt;Some&lt;/code&gt;s, let&amp;rsquo;s work on &lt;code&gt;Option&lt;/code&gt;s directly.
Of course, we can write functions that are aware that their arguments are &lt;code&gt;Option&lt;/code&gt; types, but it would quickly become difficult and unwieldy to manage.&lt;/p&gt;
&lt;p&gt;Instead, we can write normal functions, and make them work with &lt;code&gt;Option&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;We do this by the use of &lt;strong&gt;functors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, another scary word.&lt;/p&gt;
&lt;p&gt;When functional programmers say something is a &lt;code&gt;functor&lt;/code&gt;, what they mean is that there&amp;rsquo;s an associated function &lt;code&gt;map&lt;/code&gt;.
And what they also mean, is that the function &lt;code&gt;map&lt;/code&gt; has a specific type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you already seen this style of writing type signatures, but it may seem scary, so let me make it less scary.&lt;/p&gt;
&lt;p&gt;The first &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; is a function, so the first argument to &lt;code&gt;map&lt;/code&gt; is a function.
A higher-ordered function.&lt;/p&gt;
&lt;p&gt;Now, what those &lt;code&gt;f a&lt;/code&gt; and &lt;code&gt;f b&lt;/code&gt; refer to?
Well, the &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;f a&lt;/code&gt; refers to &lt;code&gt;functor&lt;/code&gt;.
Basically a type for which &lt;code&gt;map&lt;/code&gt; is defined.
So &lt;code&gt;map&lt;/code&gt; requires specific types for which that &lt;code&gt;map&lt;/code&gt; is defined.
Good?
Good.&lt;/p&gt;
&lt;p&gt;While it is sounds bad, another way to look at it, is that the &lt;code&gt;map&lt;/code&gt; generates a specific type of functor, which is dependent on context.&lt;/p&gt;
&lt;p&gt;In our case we have &lt;code&gt;Option&lt;/code&gt;, so we could have written like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now our function &lt;code&gt;map&lt;/code&gt; takes some function from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; and makes it a function that works on &lt;code&gt;Option a&lt;/code&gt; and produces an &lt;code&gt;Option b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example we can make the function &lt;code&gt;len&lt;/code&gt; work on strings that may or may not exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s just one way to look at it.&lt;/p&gt;
&lt;p&gt;Remember, there&amp;rsquo;s also a &lt;code&gt;map&lt;/code&gt; in Python that maps each element in the list via &lt;code&gt;f()&lt;/code&gt;?
Well, now it is time to explain that.&lt;/p&gt;
&lt;p&gt;The word &lt;code&gt;map&lt;/code&gt; actually comes from the &lt;code&gt;functor&lt;/code&gt;.
&lt;code&gt;map&lt;/code&gt; basically means &lt;code&gt;functor&lt;/code&gt;.
Functor is just some structure that has associated &lt;code&gt;map&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Python lists, turns out, are also a functor.
For them the &lt;code&gt;map&lt;/code&gt; function is defined as &lt;code&gt;[f(x) for x in l]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the reason why &lt;code&gt;map&lt;/code&gt; is called &lt;code&gt;map&lt;/code&gt; is because not the elements in the functor are being mapped, but because the normal function of type &lt;code&gt;a -&amp;gt; b&lt;/code&gt; is being mapped to a function &lt;code&gt;f a -&amp;gt; f b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What we are transforming are not values but functions.
Think about that.&lt;/p&gt;
&lt;p&gt;Now, to be a valid &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;functor&lt;/code&gt;, there is something called &lt;em&gt;functor laws&lt;/em&gt;.
But they are quite intuitive and not scary at all, so I won&amp;rsquo;t be covering them &lt;del&gt;I&amp;rsquo;m already tired writing all this stuff&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;So, the questions now is: how do we implement &lt;code&gt;map&lt;/code&gt; for our &lt;code&gt;Option&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_opt&lt;/span&gt;(f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_some(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; some(f(value_of(opt)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; none()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite a mess.&lt;/p&gt;
&lt;p&gt;I mean Python.&lt;/p&gt;
&lt;p&gt;But what is happening, is that we take a function &lt;code&gt;f()&lt;/code&gt;, and if our value is &lt;code&gt;Some(x)&lt;/code&gt;, we extract that &lt;code&gt;x&lt;/code&gt;, apply it to &lt;code&gt;f()&lt;/code&gt; via &lt;code&gt;f(x)&lt;/code&gt;, and wrap it back into &lt;code&gt;Some()&lt;/code&gt; via &lt;code&gt;Some(f(x))&lt;/code&gt;.
Otherwise, if it is &lt;code&gt;None&lt;/code&gt;, we just pass along that &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In OCaml this would have been written like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; map f opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; opt &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Haskell this would have been written as (&lt;code&gt;Some -&amp;gt; Just&lt;/code&gt; and &lt;code&gt;None -&amp;gt; Nothing&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; f opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; opt &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (f x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or even like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; f (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (f x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite readable, compared to Python, isn&amp;rsquo;t it.
But those codes are equivalent, I assure you.&lt;/p&gt;
&lt;p&gt;Now, with this, we can make a function &lt;code&gt;len&lt;/code&gt; that works on &lt;code&gt;Option&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;len_opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map_opt(len)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check that it works, we need to additionally convert our &lt;code&gt;Option&lt;/code&gt; to string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string_of&lt;/span&gt;(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_some(opt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_of(opt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(string_of(len_opt(some(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)))) &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#34;Some(12)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(string_of(len_opt(none(              )))) &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#34;None&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we did might not seem much, probably because it is simple.
But what is important, is that we have defined functions that work despite the presence of side effects.&lt;/p&gt;
&lt;p&gt;If we tried to take the &lt;code&gt;len()&lt;/code&gt; of &lt;code&gt;None&lt;/code&gt; directly, I&amp;rsquo;m personally not sure what would happen, because I don&amp;rsquo;t want to learn Python, but I suspect that the exception would happen.&lt;/p&gt;
&lt;p&gt;However, with &lt;code&gt;len_opt()&lt;/code&gt; we have made a &lt;em&gt;total&lt;/em&gt; function: that works in every case.
And that is actually very powerful idea.
We now don&amp;rsquo;t need any &lt;code&gt;try/catch&lt;/code&gt;.
The code &lt;em&gt;just works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ain&amp;rsquo;t that amazing?
Eh?&lt;/p&gt;
&lt;p&gt;Now, with this out of the way, let&amp;rsquo;s cover something else: &lt;code&gt;Applicative Functor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another scary term, but it is actually quite simple.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the &lt;code&gt;map&lt;/code&gt; type signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And also let&amp;rsquo;s take a look at &lt;code&gt;add&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the question, what would happen if we give &lt;code&gt;add&lt;/code&gt; to &lt;code&gt;map&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Option&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How did this happen?&lt;/p&gt;
&lt;p&gt;Remember that the type of &lt;code&gt;add&lt;/code&gt; is &lt;code&gt;Int -&amp;gt; Int -&amp;gt; Int&lt;/code&gt;.
If we try to match it with &lt;code&gt;a -&amp;gt; b&lt;/code&gt;, then &lt;code&gt;a == Int&lt;/code&gt; and &lt;code&gt;b == Int -&amp;gt; Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this means is that we accidentially put a &lt;em&gt;function&lt;/em&gt; inside a functor, instead of a value.
What this means &lt;em&gt;for us&lt;/em&gt; is that we can&amp;rsquo;t simply apply values to those functions.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;Applicative Functor&lt;/code&gt; solves that specific problem: &lt;em&gt;applies&lt;/em&gt; values to a function inside a &lt;em&gt;functor&lt;/em&gt;.
Here&amp;rsquo;s the type signature for &lt;code&gt;apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; f (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s basically it.&lt;/p&gt;
&lt;p&gt;In case of an option we can easily write one such &lt;code&gt;apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply_opt&lt;/span&gt;(opt_f, opt_a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_some(opt_f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map_opt(value_of(opt_f))(opt_a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; none()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because we first check if the &lt;code&gt;opt_f&lt;/code&gt; is actually &lt;code&gt;Some(f)&lt;/code&gt;, and if it is, then we just convert our &lt;code&gt;a -&amp;gt; b&lt;/code&gt; to &lt;code&gt;f a -&amp;gt; f b&lt;/code&gt; with &lt;code&gt;map&lt;/code&gt;, and then apply &lt;code&gt;f a&lt;/code&gt; to it.
If it is &lt;code&gt;None&lt;/code&gt;, then it is, well, &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Important note is that this &lt;code&gt;apply&lt;/code&gt; function works with curried functions (you still remember what curried functions are, right?).&lt;/p&gt;
&lt;p&gt;So if we have our &lt;code&gt;add&lt;/code&gt; function, this is how we would make it work with &lt;code&gt;Option&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map_opt(add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; some(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; some(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(string_of(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  apply(add_opt(one), two)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This doesn&amp;rsquo;t look so nice, because it is, well, Python (I feel tired of mentioning and apologizing for Python at this point).&lt;/p&gt;
&lt;p&gt;In functional languages like Haskell and OCaml you can define your own custom operators, and in those languages they define &lt;code&gt;apply&lt;/code&gt; as such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apply
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; x y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_opt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;two&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add_opt one) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; two
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, they define a custom operator for &lt;code&gt;map&lt;/code&gt; as well, so this can be rewritten like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apply
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; x y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;two&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; one &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; two
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, when I first saw this, I thought it was ugly.
Why would you need to have separate &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The answer is: to satisfy type system.&lt;/p&gt;
&lt;p&gt;Sometimes type system is an annoying bitch.
Because reality is an annoying bitch.&lt;/p&gt;
&lt;p&gt;But once you overcome that initial barrier and accept zen, you&amp;rsquo;ll start to see the good things.
For example if you had a function that sums 4 numbers instead of 2, you could have written like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_quad&lt;/span&gt; a b c d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_quad&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So instead of trying to write complex function that is aware of four &lt;code&gt;Option&lt;/code&gt;s, we just &lt;code&gt;apply&lt;/code&gt; values to our new function.&lt;/p&gt;
&lt;p&gt;In Python this&amp;hellip; wouldn&amp;rsquo;t be so nice.&lt;/p&gt;
&lt;p&gt;But we can somewhat mitigate it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lift_optA2&lt;/span&gt;(f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; apply(map_opt(f)(a), b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The term &lt;code&gt;lift&lt;/code&gt; comes from &lt;em&gt;lifting&lt;/em&gt; our values and functions into realm of side-effects (please don&amp;rsquo;t look at me like that, I didn&amp;rsquo;t come up with those silly terms).&lt;/p&gt;
&lt;p&gt;And now instead of this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map_opt(add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(string_of(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  apply(add_opt(one), two)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can write like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_opt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lift_optA2(add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(string_of(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  add_opt(one)(two)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#34;Some(3)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We essentially treat &lt;code&gt;add_opt&lt;/code&gt; as if it is a normal &lt;code&gt;add&lt;/code&gt;!
This is the power of applicative functors.
We are coding with side effects as if those functions are pure!&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t get this, well, take your time, because it is a big deal.
This is what we were getting to all this time.
All the immutability, pure functions and all the higher ordered functions were necessary for us to get to the point were we could write robust code in the face of side-effects.&lt;/p&gt;
&lt;p&gt;Now, the last part that is left to understand is the dreaded monads.
When people are talking about &lt;code&gt;monads&lt;/code&gt;, what they refer to is two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor (in case of &lt;code&gt;Options&lt;/code&gt; is &lt;code&gt;some(x)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;bind (also written as &amp;raquo;= or&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What bind essentially does, is sequence functions that do side effects, i.e. functions that are of type &lt;code&gt;a -&amp;gt; f b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here how the bind is defined in case of &lt;code&gt;Option&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(opt_a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_some(opt_a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_of(opt_a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f(v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; none()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type signature of &lt;code&gt;bind&lt;/code&gt; is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; f a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what is effectively does, is take a value in some context (affected by side-effects) and applies a side-effecting function to it.&lt;/p&gt;
&lt;p&gt;The weird order of arguments has to do with the fact, that &lt;code&gt;bind&lt;/code&gt; is often declared as a custom operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (also written as &amp;raquo;=), this allows to sequence the functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  g v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_even v3 &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h v2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is an imaginary side-effects-aware code in Haskell.
&lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt; and &lt;code&gt;v3&lt;/code&gt; refer to values in case the functions before them worked out nicely.
The code follows a &amp;ldquo;happy path&amp;rdquo;, but in case there are problems, they are handled by the &lt;code&gt;bind&lt;/code&gt; or the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator in the background.&lt;/p&gt;
&lt;p&gt;This is another power of functional programming: you think through the concepts and leverage the power of the ideas to make the programming language work for you, instead against of you.&lt;/p&gt;
&lt;p&gt;Now, hopefully you see that the power of &lt;code&gt;Option&lt;/code&gt; comes not from the fact that it represents &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;, but from the way we structure our code in such a way to keep working with those values in a consistent manner.
Despite the presence of the side-effects.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;Option&lt;/code&gt; is just one side-effect that exists there.
There are many more and they can be as general or as domain-specific as you like.
You can even write a monad to reliably work specifically with a MySQL for example.&lt;/p&gt;
&lt;p&gt;The main idea is to be aware of the ideas and side-effects at hand.&lt;/p&gt;
&lt;h1 id=&#34;bonus-programming-as-proofs&#34;&gt;Bonus: programming as proofs&lt;/h1&gt;
&lt;p&gt;At this point when you start to take advantage of all the advanced concepts of functional programming and start to read academical papers on CS and Category Theory, you&amp;rsquo;ll start to feel as if you&amp;rsquo;re not programming, but actually writing a proof of the idea that you have in mind and computer is just there to verify your ideas.&lt;/p&gt;
&lt;p&gt;And in fact this is not exactly far-fetched.
If you have heard about &lt;code&gt;coq&lt;/code&gt;, it does exactly that.
Coq is a proof-assistant.&lt;/p&gt;
&lt;p&gt;We have taught computers to verify mathematical proofs for us.
Isn&amp;rsquo;t it marvelous?!&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;m getting into a territory that I don&amp;rsquo;t understand, Coq leverages the Curry-Howard correspondance.
TL;DR it states that properly written computer program corresponds to some mathematical proof.
If you&amp;rsquo;re writing a function of type &lt;code&gt;a -&amp;gt; b&lt;/code&gt;, you&amp;rsquo;re actually writing a proof that if &lt;code&gt;a&lt;/code&gt;, then &lt;code&gt;b&lt;/code&gt;.
In fact, OCaml was initially developed with idea of writing a Coq in it.
So sometimes you can feel the mathematical roots of OCaml and writing in it sometimes feels like writing proofs.
It is not accidential.&lt;/p&gt;
&lt;p&gt;Of course, there&amp;rsquo;s no problem if you don&amp;rsquo;t understand this or if it doesn&amp;rsquo;t work in your language: you need sufficiently strong type system to model your propositions.&lt;/p&gt;
&lt;p&gt;But the idea is that the types are actually a very strong concept that helps you &lt;em&gt;reason&lt;/em&gt; about the programs.
Types are actually so powerful, they can encode the complex logic in their own fact of existance.
This is what classes are supposed to do, but properly using classes at some point becomes just another form of functional programming.&lt;/p&gt;
&lt;p&gt;There is a good wealth of materials on type theory.
Good thing that math is thousand years old and that we have much better understanding of it than of Computer Science, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&amp;hellip;&lt;/h1&gt;
&lt;p&gt;Thank you for reaching till this part.
It must have been some journey, eh?&lt;/p&gt;
&lt;p&gt;But if you reached till here, it means that your journey for you is just beginning.
There are still so many things to learn about functional programming.&lt;/p&gt;
&lt;p&gt;The thing I like the most is that when I learn more about functional programming, I somehow end up learning more about the world we live in.
I somehow become a bit more profecient in philosophy and reasoning.
I start to understand other people.
I start to understand what the people are trying to do with economies.&lt;/p&gt;
&lt;p&gt;It is surprising.&lt;/p&gt;
&lt;p&gt;I also start to get appreciation for really good ideas.
When you discover them, you start to squeel with delight.
Because really good ideas are rare, but when you discover one, it sticks with you till the end of your life.&lt;/p&gt;
&lt;p&gt;Nothing of this would have been possible without functional programming in my life.&lt;/p&gt;
&lt;p&gt;And for you who are coding in Python, try giving other languages a try.
Even if you won&amp;rsquo;t code in them professionally (or ever), at least your proficiency in Python will become better.
What I hate more than Python is bad Python code that makes other people&amp;rsquo;s lives misereable.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try to make the world a better place.&lt;/p&gt;
&lt;p&gt;Hope to see you soon&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp/&#34;&gt;Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-ii/&#34;&gt;Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part III&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>So You Want to Functional Programming (Part II)</title>
      <link>/posts/so-you-want-to-fp-ii/</link>
      <pubDate>Thu, 22 Feb 2024 13:50:44 +0900</pubDate>
      
      <guid>/posts/so-you-want-to-fp-ii/</guid>
      <description>Part I Part II Part III Higher order functions Functional programmers are all about making things better.
The problem is that we don&amp;rsquo;t know how to make things better.
So we tend to explore different ideas. And most of them don&amp;rsquo;t work. But some turn out to be surprisingly effective. So much so, the other languages tend to get those ideas into their own languages and then when you try to argue why you should learn a proper functional programming language, people look at you like crazy, saying that they already have all the fancy functional programming stuff in their language and that they already know what it is, while their code is still 90% imperative and state mutating shit.</description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp/&#34;&gt;Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part II&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-iii/&#34;&gt;Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;higher-order-functions&#34;&gt;Higher order functions&lt;/h1&gt;
&lt;p&gt;Functional programmers are all about making things better.&lt;/p&gt;
&lt;p&gt;The problem is that we don&amp;rsquo;t know how to make things better.&lt;/p&gt;
&lt;p&gt;So we tend to explore different ideas.
And most of them don&amp;rsquo;t work.
But some turn out to be surprisingly effective.
So much so, the other languages tend to get those ideas into their own languages and then when you try to argue why you should learn a proper functional programming language, people look at you like crazy, saying that they already have all the fancy functional programming stuff in their language and that they already know what it is, while their code is still 90% imperative and state mutating shit.
Sorry, nasty flashbacks.&lt;/p&gt;
&lt;p&gt;Anyhow, one of the sources of bugs is the constant repitition.
There are many boilerplate code that you have to write for some reason, and that people hope that AI will manage all of those things.&lt;/p&gt;
&lt;p&gt;Boilerplate code is such a problem, seemingly most of the research in computer science is about making the code-reuse as easy as possible.
Remember inheritence?
Its main selling point was the easy code reuse: just inherit from the class whose code you want to use.
It took people a while to realize that it is a bad idea &lt;del&gt;composition over inheritence&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;I know it is hard to tell, but functional programmists are also human.
And turns out we also don&amp;rsquo;t like boilerplate code.&lt;/p&gt;
&lt;p&gt;And so, we found our ways around it.
The reason people don&amp;rsquo;t know about it or they have difficulties understanding that concept is because of heavy influence of C.
People know functions from C (which are actually procedures, i.e. variables for storing code), so the things that C funcitons don&amp;rsquo;t do must be impossible.&lt;/p&gt;
&lt;p&gt;However, that is not the case.
You know, we have dependency injection of our own.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look back at one of our examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_left_to_right&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_right_to_left&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, those two functions are basically the same.
The only difference is how we go through the range.
So this function could be abstracted like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_over_range&lt;/span&gt;(l, _range):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; _range:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now if you want to do summation from left to right or right to left, you just pass the proper range, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum_generic(l, range(len(l)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum_generic(l, range(len(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that doesn&amp;rsquo;t look so nice, especially since you may easily forget which argument is which.
There are ways to do that, but we don&amp;rsquo;t have necessary tools to do that just yet.
So let&amp;rsquo;s come back to that problem later.&lt;/p&gt;
&lt;p&gt;Believe it or not, but you&amp;rsquo;ve already been exposed to functional programming in your school.
You probably know this symbol: &lt;code&gt;Σ&lt;/code&gt;.
Unfortunately, it doesn&amp;rsquo;t look so nice in this blog post and I haven&amp;rsquo;t figured how to draw LaTeX expressions using JavaScript &lt;del&gt;(damn you, webpack!)&lt;/del&gt;.
So let&amp;rsquo;s write it like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N
 sum { i } = N * (N + 1) / 2
i = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The way we would write in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_n&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is good.
But now imagine that we have to sum squares:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N              N(N + 1)(2N + 1)
 sum { i * i } = ----------------
i = 1                   6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;No problem, let&amp;rsquo;s write it in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sq&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice, easy-peasy. But now we are asked to sum the square roots:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N
 sum { sqrt(i) } = ???
i = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While I don&amp;rsquo;t know the equation for that, we can still write the code that does this for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sqrt&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; sqrt(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was easy, but hopefully you&amp;rsquo;re starting to see the problem now.
Let&amp;rsquo;s look at the code that we&amp;rsquo;ve written:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_n&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sq&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sqrt&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; sqrt(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We basically wrote the same code several times.
The only thing that is changing is the term that we sum over.
The terms are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqrt(x)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s look at the mathematical expressions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N
 sum { i }
i = 1

  N
 sum { i * i }
i = 1

  N
 sum { sqrt(i) }
i = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Those are awfully similar as well, and the only parts that are changing are:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;i
i * i
sqrt(i)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They are basically the same!
That is not a coincidence.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the same part of the mathematical expression:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N
 sum { ... }
i = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What this expression says, is to sum the terms described in the &lt;code&gt;{...}&lt;/code&gt;.
In fact, we can write it like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  N
 sum  f(i)
i = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Turns out, we can do the same in the Python code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_generic&lt;/span&gt;(l, f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is basically the same code, with some key difference: we are passing &lt;code&gt;f()&lt;/code&gt; to &lt;code&gt;sum_generic()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Passing functions as arguments?&amp;rdquo; you might be asking.
If it is your first time seeing this, this is a quite important and powerful idea that you&amp;rsquo;ll be seeing often.&lt;/p&gt;
&lt;p&gt;Now we can write our &lt;code&gt;sum_n()&lt;/code&gt;, &lt;code&gt;sum_sq()&lt;/code&gt; and &lt;code&gt;sum_sqrt()&lt;/code&gt; in terms of &lt;code&gt;sum_generic()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_n&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum_generic(l, &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sq&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum_generic(l, &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_sqrt&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum_generic(l, &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: sqrt(x))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;lambda&lt;/code&gt; is just a function that accepts an argument x.
Essentially lambda is an anonymous function.&lt;/p&gt;
&lt;p&gt;In functional programming we use functions for almost everything, even minute things, but it is still difficult to come up with meaningful names, so &lt;code&gt;lambda&lt;/code&gt; is a way to create functions on the fly (and not give them names).&lt;/p&gt;
&lt;p&gt;Now the obligatory explanation of higher ordered functions.&lt;/p&gt;
&lt;p&gt;In the C language, functions are just a way for you to structure sequence of instructions.
You just give them a name and then invoke those instructions with a name.
In a sense, you could write down those instructions with a macros instead, and they would still act the same.&lt;/p&gt;
&lt;p&gt;However, higher ordered functions allow you several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can accept other functions as their input arguments&lt;/li&gt;
&lt;li&gt;They can return functions as a result&lt;/li&gt;
&lt;li&gt;Those functions can be stored in a variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully you can see that the idea of the higher ordered function is not as scary as it seems, although the words may sound scary or obscure (math people are meanies, I&amp;rsquo;m sorry).&lt;/p&gt;
&lt;p&gt;Higher ordered functions are such a powerful and useful idea, that people would hack Python to provide those capabilities, by generating code that is similar to lambdas and then evaluate it, or by changing AST, despite Guido&amp;rsquo;s thinking otherwise about lambdas.
In the end, Guido allowed it, but the lambdas are half-assed, unfortunately.
This is something we have to live with.&lt;/p&gt;
&lt;p&gt;Additionally, higher ordered functions exist even in C++ (since C++11!).
While their type is difficult to nail down properly, you can use templates to help you out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; Fn&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; some_function(Fn f, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; some_function([](&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; }, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the idea of higher order functions may seem simple, there&amp;rsquo;s one important reason that many math people get overly excited about them: when providing a function &lt;code&gt;f()&lt;/code&gt;, you can create a new function &lt;code&gt;g()&lt;/code&gt; that can do some more extended things, more than &lt;code&gt;f()&lt;/code&gt; could!
We&amp;rsquo;ll see examples of it in the future, if you stick around, but for now just keep the idea in the back of your mind.&lt;/p&gt;
&lt;p&gt;Now, the question is: how exactly do you use the higher ordered functions?&lt;/p&gt;
&lt;p&gt;Well, you may have had this thought a lot: &amp;ldquo;Okay, let&amp;rsquo;t write &lt;code&gt;for&lt;/code&gt; again&amp;hellip;&amp;rdquo;, and then you&amp;rsquo;d write a code similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# busy doing computations with a[i]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# do some computation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From what I can see, this can be abstracted away like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(a[i])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;f()&lt;/code&gt; is some function that does all the computations that we did.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s write a function that abstracts away this boilerplate code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(a, f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason we picked the name &lt;code&gt;map&lt;/code&gt; is because map is a name often used for this kind of function: which takes some function &lt;code&gt;f()&lt;/code&gt; and applies it to each element of some list &lt;code&gt;a&lt;/code&gt; and produces a new list &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In reality, &lt;code&gt;map&lt;/code&gt; doesn&amp;rsquo;t need to work on lists only, but this, and the reason why this function is called &lt;code&gt;map&lt;/code&gt; will be covered later.&lt;/p&gt;
&lt;p&gt;On the side note, the more declarative way to write this, is to do it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(a, f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [f(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it trips you up, just stop and think for a while.
If it doesn&amp;rsquo;t make sense, think of a set theory.
What is a set theory?
Well, set theory is what happens when you try to give names to things that you took for granted.&lt;/p&gt;
&lt;p&gt;Anyway, there&amp;rsquo;s a function called &lt;code&gt;map&lt;/code&gt;, that does the similar thing as the &lt;code&gt;map&lt;/code&gt; that we defined.
The only difference, is that while our versions return &lt;code&gt;list&lt;/code&gt;, the Python versions return an iterator.
The reason will become obvious later, but if you want to use python versions, don&amp;rsquo;t forget to transform them to list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list(map(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, map is one of the functions that we often use, because it comes from the imperative for loop.
Another thing that we would often do is something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# do something with s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is something that functional programmers also often use.
The names are &lt;code&gt;reduce()&lt;/code&gt;, &lt;code&gt;fold()&lt;/code&gt;, &lt;code&gt;left_fold()&lt;/code&gt;, &lt;code&gt;right_fold()&lt;/code&gt;, etc.
Let&amp;rsquo;s write our own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;(a, f, initial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  acc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initial
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    acc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(acc, x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; acc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;f(acc, x)&lt;/code&gt; is a function that takes two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The accumulator (&lt;code&gt;acc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The value (&lt;code&gt;x&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially the function &lt;code&gt;f()&lt;/code&gt; tells the reduce how to combine, or &lt;code&gt;reduce&lt;/code&gt; the values in the list to one value.
So if we want to write a sum function, we need to write how to combine the values into a sum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addition&lt;/span&gt;(acc, x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reduce(l, addition, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can describe many different functions using &lt;code&gt;reduce()&lt;/code&gt;.
For example we can calculate the length of the array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(acc, _):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reduce(l, length, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;len([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Essentially, for every element in the list we do &lt;code&gt;+1&lt;/code&gt; to the accumulator.
That is in the essence the definition of the length of the list.&lt;/p&gt;
&lt;p&gt;Or we can find the maximum in a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_max&lt;/span&gt;(acc, v):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; acc &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_max&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reduce(l, _max, MIN_LIMIT) &lt;span style=&#34;color:#75715e&#34;&gt;# MIN_LIMIT is impossibly small value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_max([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; is a ubiquious tool in the toolbox of functional programmers, so get used to it.
&lt;code&gt;fold&lt;/code&gt; is just another way to say &lt;code&gt;reduce&lt;/code&gt;: the list is being &lt;code&gt;fold&lt;/code&gt;ed into a single value, instead of being &lt;code&gt;reduce&lt;/code&gt;d.&lt;/p&gt;
&lt;p&gt;While this makes sense, what about &lt;code&gt;fold_left&lt;/code&gt; and &lt;code&gt;fold_right&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Since the functions &lt;code&gt;fold_left&lt;/code&gt; and &lt;code&gt;fold_right&lt;/code&gt; are pure, they can be rewritten like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold_left (l, f, init) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(f(f(f(init, l[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]), l[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]), l[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]), &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold_right(l, f, init) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(f(f(f(init, l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]), l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]), l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]), &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it doesn&amp;rsquo;t make sense, then assuming that &lt;code&gt;∘&lt;/code&gt; is some arbitary binary operator and that all types are consistent, then we can rewrite it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold_left (l, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt;, init) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((((init &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; l[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; l[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; l[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold_right(l, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt;, init) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; (l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; (l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; (l[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∘&lt;/span&gt; init))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is something called equational reasoning (remember the first part and Physics example?).
By equalizing two sides, we can say that one is equal to another.
This is a powerful tool in the hands of a functional programmer.
Pay close attention to that.&lt;/p&gt;
&lt;p&gt;What it tells us in this case, is that the &lt;code&gt;fold_left&lt;/code&gt; and &lt;code&gt;fold_right&lt;/code&gt; behave as if inserting some binary operator between each of the elements in the list.
The difference, is that in case of &lt;code&gt;fold_left&lt;/code&gt;, we are moving from left to right.
The &lt;em&gt;associativity&lt;/em&gt; is &lt;code&gt;left&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In case of &lt;code&gt;fold_right&lt;/code&gt; we are moving from right to left.
The &lt;em&gt;associativity&lt;/em&gt; is &lt;code&gt;right&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it feels arbitary, the reason is because it is.
I may be wrong, so when you&amp;rsquo;re using your language&amp;rsquo;s &lt;code&gt;fold_left&lt;/code&gt; and &lt;code&gt;fold_right&lt;/code&gt;, please consult the documentation.&lt;/p&gt;
&lt;p&gt;And another thing, I may have lied about &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt;.
They are not exactly the same thing.&lt;/p&gt;
&lt;p&gt;In case of &lt;code&gt;fold&lt;/code&gt;, you have to provide an initial element.
But in case of &lt;code&gt;reduce&lt;/code&gt;, the initial element is the first (or last) element of the list.&lt;/p&gt;
&lt;p&gt;Or I&amp;rsquo;m lying again.&lt;/p&gt;
&lt;p&gt;Anyway, nice to know, right?&lt;/p&gt;
&lt;p&gt;Well, there&amp;rsquo;s another function that we often use and in fact gets implemented in almost every other mainstream language.
The use case for that function, I&amp;rsquo;ll be honest, not so clear, until you try to use it.
But here it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;magical_function&lt;/span&gt;(l, p):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p(x) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [x]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what is function &lt;code&gt;p()&lt;/code&gt;?
In mathematical language this is called a &lt;em&gt;predicate&lt;/em&gt;.
It is a fancy name for a function who&amp;rsquo;s return type is a &lt;code&gt;bool&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(x: any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# predicate function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may have seen it, but more like part of an SQL query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D%&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- select all names starting with &amp;#34;D&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Python, equivalent imperative code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;names_starting_with_d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; accounts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name_of(acc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    names_starting_with_d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use names_starting_with_d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kinda boilerplatey, eh?
Compared to nice SQL version.&lt;/p&gt;
&lt;p&gt;In my case, I often used this function when working with a set of data received from some REST API and then making sure it matches some specific criteria, because the data is really volatile and comes in different shapes.
&lt;code&gt;filter&lt;/code&gt; is what brings back sense and structure into my dataflow, even if I have to remove bad apples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_even &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(magical_function(l, is_even)) &lt;span style=&#34;color:#75715e&#34;&gt;# prints [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s another way to achieve this result, using list comprehensions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print([x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# prints [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Overall the syntax for list comprehensions is way better in Python because it is functional and declarative by design.
However, composing them is a pain, especially when you don&amp;rsquo;t know how exactly the variables get captured, so you have to do alpha-conversion by hand (another fancy name for renaming variables to avoid confusion and conflicts).&lt;/p&gt;
&lt;p&gt;This is nice and dandy, but what so special about them?
Well, nothing really, the ideas are simple.
We will get more into the implications once we get a stronger base, but for now, just use the functions however you like.
Afterall, the joy of learning is in experimenting and making mistakes.
The most important aspects to keep in mind, is that the functions are pure, we are just transforming the data, and we do it without changing the data we were not supposed to change (immutability, remember?).&lt;/p&gt;
&lt;p&gt;So, when you try to do things more and more declaratively, you&amp;rsquo;ll realize that you need more and more functions.&lt;/p&gt;
&lt;p&gt;For example, you have a list &lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]&lt;/code&gt;, and you want it to have dashes interspersed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; intersperse([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or for example you have two lists and you want to zip them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; zip([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you want to shift the elements in the list by some &lt;code&gt;n&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; shift([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many functions that are simple, but can be quite powerful.&lt;/p&gt;
&lt;p&gt;Again, to make the most use of them, the idea is to make them composable.&lt;/p&gt;
&lt;p&gt;While the functions shown in the examples are not higher-ordered functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, there are many functions that you need to use to achieve your goals and simply using &amp;ldquo;the trifecta&amp;rdquo; won&amp;rsquo;t be enough, so keep your eyes and mind open.&lt;/p&gt;
&lt;p&gt;Also, there are some performance implications for using those functions: they are working on immutable lists, so in theory it means a new copy each and every time.&lt;/p&gt;
&lt;p&gt;Remember when I said that the &lt;code&gt;map&lt;/code&gt; returns iterator?
Well, the thing is that you may find yourself composing &lt;code&gt;map()&lt;/code&gt; with each other, or &lt;code&gt;map()&lt;/code&gt; with &lt;code&gt;filter()&lt;/code&gt; and so on.
So instead of creating a new copy of a list each and every function call, the methods return iterator and then you generate the list only when you actually need to.
This is some sort of optimization, but it is an &amp;ldquo;accidential complexity&amp;rdquo; still.&lt;/p&gt;
&lt;p&gt;For that reason, there are several things that you can do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimize the amount of data you work on: instead of using &lt;code&gt;map&lt;/code&gt; and then &lt;code&gt;filter&lt;/code&gt;, try &lt;code&gt;filter&lt;/code&gt;ing first and then &lt;code&gt;map&lt;/code&gt;ping.&lt;/li&gt;
&lt;li&gt;If you have several &lt;code&gt;map&lt;/code&gt; functions, try to turn it into one &lt;code&gt;map&lt;/code&gt; (and suffer style deductions):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map(f, map(g, map(h, l))) &lt;span style=&#34;color:#f92672&#34;&gt;~&amp;gt;&lt;/span&gt; map((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: f(g(h(x)))), l)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;If you really need performance, then use side-effects like mutation, but make sure that the function is pure when observed from &lt;em&gt;outside&lt;/em&gt;!
Make sure the side effects don&amp;rsquo;t leak outside of your function.&lt;/li&gt;
&lt;li&gt;Perform actions in parallel (if they can be done so, like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If still, none of the solutions are fast enough, try to think if you really need that speed.
And if you do, well, you are free to abandon the purity and composability alltogether.
The most important part is that you know what you&amp;rsquo;re doing.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re a professional after all.&lt;/p&gt;
&lt;p&gt;Well, we&amp;rsquo;re almost done with the higher ordered functions.
Let&amp;rsquo;s just cover some of the concepts and ideas that rear their heads here and there all over the place in functional programming languages: &lt;em&gt;currying&lt;/em&gt; and &lt;em&gt;piping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;They are simple, trust me.&lt;/p&gt;
&lt;p&gt;One of the reasons you weren&amp;rsquo;t able see all the interesting functional programming ideas is because the languages themselves don&amp;rsquo;t actively push you towards discovering those ideas, or worse yet, actively prevent you from coding in a pure and manageable style.&lt;/p&gt;
&lt;p&gt;So those things you haven&amp;rsquo;t seen, well, because people usually don&amp;rsquo;t code like that.&lt;/p&gt;
&lt;p&gt;You remember the talk about functions being composable?
Well, the composability is really the important aspect that we are trying to achieve (sometimes to our own detriment).
The more we code with simple functions, the more we feel the need to compose functions.
But if we can&amp;rsquo;t compose functions, we curse, give up hope and get angry at the functional programming style for being useless and wasting our precious time that we could have spent on TikTok, Instagram and Twitter instead.&lt;/p&gt;
&lt;p&gt;Imagine some magical function like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipe(accounts,[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get_boys,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get_adults,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extract_names,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  names_starting_with_a,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  capitalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(res)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While we don&amp;rsquo;t know how those &lt;code&gt;get_boys&lt;/code&gt;, &lt;code&gt;get_adults&lt;/code&gt;, &lt;code&gt;extract_names&lt;/code&gt; etc. are implemented, we kind of get the idea of what is going on.
This code is easy to understand.
One would say that it is encapsulation (which I think it is not, it is just good code).&lt;/p&gt;
&lt;p&gt;This thing is called &lt;code&gt;pipe&lt;/code&gt;, and the process of using &lt;code&gt;pipe&lt;/code&gt; is called &lt;em&gt;piping&lt;/em&gt; (I told you it was easy).
The idea is that we take the output of the previous function and make it an input of the next function.
It is a &lt;code&gt;pipe&lt;/code&gt; as in bash, shell, etc. (please tell me you know what bash is&amp;hellip;)
We provide initial argument (in this case &lt;code&gt;accounts&lt;/code&gt;), and then pass it to an initial function and then go on.&lt;/p&gt;
&lt;p&gt;This is simple to understand, but we have a problem: the application of the function must be delayed somehow.&lt;/p&gt;
&lt;p&gt;Well, it is simple, if we know what &lt;em&gt;currying&lt;/em&gt; is (no, it has nothing to do with curry, and no, I don&amp;rsquo;t know why it is called &lt;code&gt;currying&lt;/code&gt;, please don&amp;rsquo;t ask me that).&lt;/p&gt;
&lt;p&gt;If you start to get into Haskell, you&amp;rsquo;ll start to see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how type signatures are done in Haskell.
When I was looking at that, I couldn&amp;rsquo;t understand why it is done like this.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want to understand why it is done like that, then the simple explanation that the last item is the return type, and everything before that is the type that it accepts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  return &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;    arg2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      arg1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite simple.&lt;/p&gt;
&lt;p&gt;The code for that function looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; x y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Python it would be something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x, y): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Except it is not.&lt;/p&gt;
&lt;p&gt;In Python all functions are uncurried by default.&lt;/p&gt;
&lt;p&gt;In Haskell all functions are curried by default.&lt;/p&gt;
&lt;p&gt;So the functions are not equivalent.
If we want to write a similar function, we need to write something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it is equivalent.&lt;/p&gt;
&lt;p&gt;Are you asking &amp;ldquo;why?&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;Well, in Haskell we can write like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add3&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;seven&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add3 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;also_seven&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, since our Python function is curried, we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add3       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seven      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add3(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;also_seven &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What I did just now is called &lt;em&gt;partial application&lt;/em&gt;.
It is when I apply function &lt;em&gt;partially&lt;/em&gt;, i.e. I don&amp;rsquo;t give it all the arguments immediately, but do it in steps.
One of reasons for doing so is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes arguments are not available immediately&lt;/li&gt;
&lt;li&gt;You have a list of arguments that you always pass. You can partially apply those values and create functions that accept only arguments that really matter&lt;/li&gt;
&lt;li&gt;We can now do piping&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before that, let&amp;rsquo;s get back to our type signatures in Haskell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a generic type signature in Haskell which says that &lt;code&gt;f&lt;/code&gt; is a function from type &lt;code&gt;a&lt;/code&gt; to type &lt;code&gt;b&lt;/code&gt;, i.e. it accepts an argument of type &lt;code&gt;a&lt;/code&gt; and the return type is &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is another generic functions that accepts two arguments of type &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and produces type &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;-&amp;gt;&lt;/code&gt; is actually an operator, a function operator.
There are implicit parentheses placed in the last type signature, let&amp;rsquo;s make them explicit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, &lt;code&gt;-&amp;gt;&lt;/code&gt; is right associative.
Another fact, &lt;code&gt;b -&amp;gt; c&lt;/code&gt; is just another type, so this is equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the magic.
When we have a function of type &lt;code&gt;a -&amp;gt; b&lt;/code&gt; and we provide it &lt;code&gt;a&lt;/code&gt;, what we get is &lt;code&gt;b&lt;/code&gt;.
So by this logic, if we take &lt;code&gt;a -&amp;gt; d&lt;/code&gt; and provide it &lt;code&gt;a&lt;/code&gt;, we get &lt;code&gt;d&lt;/code&gt;.
But &lt;code&gt;d&lt;/code&gt; is actually &lt;code&gt;b -&amp;gt; c&lt;/code&gt;, so we actually get another function.&lt;/p&gt;
&lt;p&gt;So now hopefully you see why we written the Python code that way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we first supply &lt;code&gt;x&lt;/code&gt;, we as a result get a new function which now accepts &lt;code&gt;y&lt;/code&gt;.
Once we get both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, we can evaluate the result.&lt;/p&gt;
&lt;p&gt;With this we can do piping.
Let&amp;rsquo;s write out those functions first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_boys&lt;/span&gt;(accounts):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; accounts[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boys&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_adults&lt;/span&gt;(boys):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boys &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; boys[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_names&lt;/span&gt;(boys):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boys]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;names_starting_with_a&lt;/span&gt;(names):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; names &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;capitalize&lt;/span&gt;(names):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; names]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is good.&lt;/p&gt;
&lt;p&gt;Actually, function with one argument can be used in a pipe.
So let&amp;rsquo;s write a &lt;code&gt;pipe&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(v, l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we essentially did is create a function that takes the output value of a function and makes it an input for the next function.
Essentially what &lt;code&gt;pipe&lt;/code&gt; function is supposed to do.&lt;/p&gt;
&lt;p&gt;Now, if the functions had to take more arguments, we would be in a bit of a trouble.
Again, because functions are uncurried by default, the Python would complain that we applied less arguments than we should have.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a function that curries other functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curry_that&lt;/span&gt;(f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [x]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is essentially a poor man&amp;rsquo;s &lt;code&gt;curry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What we are doing here, is that we are taking a function &lt;code&gt;f&lt;/code&gt;, and then stage it to accept arguments in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initial list of arguments, except for the last one&lt;/li&gt;
&lt;li&gt;The last argument&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all the arguments are passed to the function, it will collect all the arguments into the list, and then expand them using the &lt;code&gt;*&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;This is how we would use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;triple_sum&lt;/span&gt;(a, b, c):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_sum_curry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curry_that(triple_sum)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pipe(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, [t_sum_curry([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is a mess, I know.
But then again, you should use better languages.
Hopefully, you are starting to see why I don&amp;rsquo;t like Python.&lt;/p&gt;
&lt;p&gt;There are better alternatives in the &lt;code&gt;PyMonad&lt;/code&gt; library, like &lt;code&gt;@curry&lt;/code&gt; decorator.
Look up the documentation if you&amp;rsquo;re interested.&lt;/p&gt;
&lt;p&gt;Now, hopefully you understand those tools and they will be useful to you &lt;del&gt;or you finally decided to code in the better programming language&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;We are almost there, I can see the light.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp/&#34;&gt;Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part II&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-iii/&#34;&gt;Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>So You Want to Functional Programming</title>
      <link>/posts/so-you-want-to-fp/</link>
      <pubDate>Thu, 22 Feb 2024 01:03:00 +0900</pubDate>
      
      <guid>/posts/so-you-want-to-fp/</guid>
      <description>Part I Part II Part III Hello there, poor soul! How come you found your way to this post? Are you perhaps unhappy with the way programming is done nowadays? Did you perhaps hear someone say that functional programming has all the benefits like:
Simplifying your projects Removing a class of errors and bugs Bringing back joy of programming of early days Well, whether those claims are true or not, you will have to see them for yourself.</description>
      <content>&lt;ul&gt;
&lt;li&gt;Part I&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-ii/&#34;&gt;Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-iii/&#34;&gt;Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hello there, poor soul!
How come you found your way to this post?
Are you perhaps unhappy with the way programming is done nowadays?
Did you perhaps hear someone say that functional programming has all the benefits like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplifying your projects&lt;/li&gt;
&lt;li&gt;Removing a class of errors and bugs&lt;/li&gt;
&lt;li&gt;Bringing back joy of programming of early days&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, whether those claims are true or not, you will have to see them for yourself.
One interesting thing happening is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;people who are not into FP think those who are into FP are pretentious pricks who want to feel themselves smarter than everyeone else, while&lt;/li&gt;
&lt;li&gt;the guys who are into FP don&amp;rsquo;t understand all the resistance when there&amp;rsquo;s such a wealth of good things about FP and it is actually not as difficult as many people claim.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, it seems kinda accurate to me.&lt;/p&gt;
&lt;p&gt;There was a period in time when I was &amp;ldquo;aggressive&amp;rdquo; trying to get people learn Functional Programming.
Because of me, some people are probably never crossing to our side.&lt;/p&gt;
&lt;p&gt;Oopsie-daisy.&lt;/p&gt;
&lt;p&gt;But in my defense, some of those people saw the benefits of those ideas, but are in a stage of their lives when they can&amp;rsquo;t afford to learn functional programming.&lt;/p&gt;
&lt;p&gt;That is a valid gripe with functional programming that those who are on the other side have: there&amp;rsquo;s just too much to learn.
Of course, you can use &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, recursion, immutability, etc. to spice up your code with some functional flavor.
But the problem most advanced of us have with this, is that you won&amp;rsquo;t understand what you&amp;rsquo;re doing and whether the solution you&amp;rsquo;re deploying is the proper one.
Essentially, you&amp;rsquo;re not getting what you were promised: understanding.
But it is too difficult to get all of it right away (thanks OOP).
Blindly deploying all the tools that you&amp;rsquo;ve learned in hopes it will work is not such a good approach, because high chances it is not going to work, but somehow it is the fault of the FP folk who proposed the idea, not the person who couldn&amp;rsquo;t figure out how to use the idea properly.
Speaking from the experience of a friend who tried to make the code in Dart robust by employing a &lt;code&gt;Either&lt;/code&gt; type, and who later regretted it, since Dart wasn&amp;rsquo;t developed with FP ideas in mind.&lt;/p&gt;
&lt;p&gt;But the problem still persists: functional programming is difficult to grasp.
In truth, functional programming ideas are simple, and possibly much simpler than OOP ideas to understand (I mean understand, not just &amp;ldquo;ahh, I see&amp;rdquo; and forget the next 15 minutes).
But for some people their brains are adamant in not comprehending those simple ideas.
And I don&amp;rsquo;t know why.
Might make a good PhD thesis in Neuroscience, who knows.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;ll try my best to explain functional programming principles&amp;hellip; in Python.
Nowadays everyone and their grandmother seems to know Python, so it should be no problem.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-lesson&#34;&gt;What is the lesson?&lt;/h1&gt;
&lt;p&gt;The most important takeaway from this post is the perspective.
The correct one, hopefully.&lt;/p&gt;
&lt;p&gt;The problem with learning functional programming is that its ideas lie on several spectrums of logic, math, computer science and engineering, simultaneously.
Its ideas are so deep, essentially like calculus, and are re-discovered again and again, by many different people, independently.
The book of &amp;ldquo;Clean Code&amp;rdquo; is essentially a pseudo-introduction into functional programming (not that reading that book helped me understand how to go about my code as a kid, but I really liked it nonetheless).&lt;/p&gt;
&lt;p&gt;So yeah, there are many ways to look at the concept through many different lenses, and tugging on one concept attracts other concepts and ideas.
That&amp;rsquo;s why when you&amp;rsquo;re learning functional programming, it feels like you have to learn a lot, simultaneously.
Because you kinda do.
Additionally, functional programming tends to attract people who like to explore ideas, which is nice, but they make bad teachers.
That&amp;rsquo;s why we need better teaching materials for functional programming.&lt;/p&gt;
&lt;p&gt;At the end of your (beginning of a) journey into functional programming &lt;del&gt;if you make it&lt;/del&gt;, you get a sense of understanding.
The world would never be the same.
You&amp;rsquo;ll start to see things that weren&amp;rsquo;t there before.
Like a sixth sense.
And you&amp;rsquo;ll realize that the ideas were in fact quite simple (although not easy to grasp).&lt;/p&gt;
&lt;p&gt;You won&amp;rsquo;t get that understanding by just reading one blog post.
Or two.
Or ten.
Or even one or two books.
At least now.
People who get into functional programming claim that Elm is a great gateway drug into functional programming: it is easy and friendly.
The problem is that it is quite niche (for client-side frontend and compiles to JavaScript).
Unless you do just that, you&amp;rsquo;re stuck.
So one of my aspirations is to create a general purpose programming language, that will be a bad functional programming language, but which will make a good start into FP, just like Elm does.
Unfortunately there isn&amp;rsquo;t one (yet), so we&amp;rsquo;ll be using Python.&lt;/p&gt;
&lt;p&gt;Remember, the most important takeaway of this blog post is the perspective.
If you get the perspective, a lot of unconnected things will fall into place.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s start.&lt;/p&gt;
&lt;h1 id=&#34;functions-purity-and-side-effects&#34;&gt;Functions, Purity and Side-effects&lt;/h1&gt;
&lt;p&gt;Just like in OOP, the most basic building block is an object (or a class, I don&amp;rsquo;t know), the most basic building block in functional programming is a&amp;hellip; function.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t look at me like that: there are surprisingly many things that you can build with just functions.
In fact, Alonzo Church, academic supervisor of Alan Turing, discovered lambda calculus and showed that it is equivalent to &lt;em&gt;the&lt;/em&gt; Turing Machine.
Essentially, what your fancy C++ and other languages can do, functional programming can also do.&lt;/p&gt;
&lt;p&gt;The first important point:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Important point no. 1: Function is all you need
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whenever you feel the itch to overcomplicate your solution, try writing a simple function first.&lt;/p&gt;
&lt;p&gt;But not just any function.
What we like in functional programming is a &lt;em&gt;pure&lt;/em&gt; function.
So, now we are getting jargons territory, let&amp;rsquo;s quickly back it up with examples.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s imagine we are trying to write a function that takes the user&amp;rsquo;s name and prints the message of the day:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;motd&lt;/span&gt;(name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! Have a nice day!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  motd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KtlTheBest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, while this example is purely imaginary, the code is emblematic of what people would usually write.
While it is fine, the question is: how do you &lt;em&gt;test&lt;/em&gt; this?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;What do you mean by &lt;em&gt;test&lt;/em&gt;?&amp;rdquo; I hear you asking.
What I&amp;rsquo;m asking is why are you confident that this will work?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well, I&amp;rsquo;ll run the code and see the result printed in the terminal&amp;hellip;&amp;rdquo;.
Yeah, but when I was initially writing this code, I made a mistake.
I would have to run the code to see the bug.&lt;/p&gt;
&lt;p&gt;But what if the code would be more involved?
Say, it would have many functions (or better say &lt;em&gt;procedures&lt;/em&gt;) doing many things, tightly coupled and the only way you see the output is by pinging or calling some other guy sitting on another laptop checking the server response.&lt;/p&gt;
&lt;p&gt;Doesn&amp;rsquo;t sound so nice now, does it?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well, that&amp;rsquo;s how the things are&amp;rdquo;.
But we as functional programmers would disagree.
We would say that the reason you are having problems is because most of your functions are &lt;em&gt;impure&lt;/em&gt;.
For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt; is an impure function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randint()&lt;/code&gt; is an impure function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.now()&lt;/code&gt; is an impure function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input()&lt;/code&gt; is an impure function.&lt;/li&gt;
&lt;li&gt;Function that fails because it is Tuesday is an impure function.&lt;/li&gt;
&lt;li&gt;Function that reads from a global variable is an impure function.&lt;/li&gt;
&lt;li&gt;Function that changes the values of input arguments passed by reference is an impure function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Already, in a small function of one line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;motd&lt;/span&gt;(name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! Have a nice day!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; you&amp;rsquo;re already experiencing problems.&lt;/p&gt;
&lt;p&gt;So, how do we make this testable?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;motd_pure&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! Have a nice day!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we are doing instead of printing is &lt;em&gt;returning a string to print&lt;/em&gt;.
Printing is not our responsibility now.&lt;/p&gt;
&lt;p&gt;Now, to verify the code, we can write something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; motd_pure(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KtlTheBest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, KtlTheBest! Have a nice day!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(message)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we made, is essentially made an impure function a &lt;em&gt;pure&lt;/em&gt; one.
But as a consequence, this function became &lt;em&gt;testable&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We also wrote an &lt;code&gt;assert&lt;/code&gt; statement that will print &lt;strong&gt;only&lt;/strong&gt; if the function &lt;code&gt;motd_pure()&lt;/code&gt; is correct (by some arbitrary definition).&lt;/p&gt;
&lt;p&gt;And if you have very keen eyes, you&amp;rsquo;ll realize that there&amp;rsquo;s a bug in a &lt;code&gt;motd_pure&lt;/code&gt;: I forgot a comma after &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But instead of blindly relying on my (or someone else&amp;rsquo;s) eyes, I can ask computer to verify the function and be 100% sure it works only when it is correct.&lt;/p&gt;
&lt;p&gt;So with that, let&amp;rsquo;s get into some definitions.&lt;/p&gt;
&lt;h2 id=&#34;what-is-purity&#34;&gt;What is purity?&lt;/h2&gt;
&lt;p&gt;When talking about purity, functional programmers refer to pure functions.
By pure functions we mean functions in mathematical sense:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;f(x) = x * x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can also say that pure functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Output of the pure function &lt;em&gt;always&lt;/em&gt; depends solely on &lt;em&gt;input&lt;/em&gt; arguments.&lt;/li&gt;
&lt;li&gt;It has no &lt;em&gt;observable&lt;/em&gt; side-effects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s look at the function again.
If we try to substitute numbers, we get different values:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;f(1)  = 1  * 1  = 1
f(2)  = 2  * 2  = 4
f(10) = 10 * 10 = 100
f(n)  = n  * n  = n * n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, the result of &lt;code&gt;f(x)&lt;/code&gt; depends solely on &lt;code&gt;x&lt;/code&gt;.
Another interesting observation is that we can evaluate &lt;code&gt;f(x)&lt;/code&gt; infinitely many times, and the result would always be the same: &lt;code&gt;x * x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a nice property to have.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Are there functions that don&amp;rsquo;t behave like that?&amp;rdquo; you may ask.
To which I&amp;rsquo;ll show you this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, if we evaluate this function like this: &lt;code&gt;foo(3)&lt;/code&gt;, we may get &lt;code&gt;9&lt;/code&gt;, but when we run it again, &lt;code&gt;f(3) = -3&lt;/code&gt;.
Now, we have two different values for &lt;code&gt;foo(3)&lt;/code&gt;.
This is not a pure function.
This function has an implicit &lt;em&gt;state&lt;/em&gt;.
Implicit, because it is not observable from the function signature (input and output arguments), but if you run it, you&amp;rsquo;ll feel the effects (for example different values for the same input arguments).&lt;/p&gt;
&lt;p&gt;Second line says that the function must not have &lt;em&gt;observable&lt;/em&gt; side-effects.
Let me show you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_left_to_right&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_right_to_left&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll give you a little sneak-peek, but &lt;em&gt;mutation&lt;/em&gt; of a variable (i.e. &lt;code&gt;x = 1; x = 2; assert x != 1&lt;/code&gt;) is a &lt;em&gt;side-effect&lt;/em&gt; and thus leads to impure functions.
So while we are doing a side-effect, we essentially have pure functions.&lt;/p&gt;
&lt;p&gt;For the same list &lt;code&gt;l&lt;/code&gt; the results of the functions would be the same.
On a side note, we are doing the order in different ways in both functions, but since the functions are pure and the addition is &lt;em&gt;commutative&lt;/em&gt;, i.e. the &lt;code&gt;x + y = y + x&lt;/code&gt;, we can say:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum_left_to_right(l) == sum_right_to_left(l)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, if we were to add &lt;code&gt;print(&amp;quot;Currently on: {}&amp;quot;.format(i))&lt;/code&gt; into the loop, the functions would become impure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_left_to_right&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_right_to_left&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First of all, the functions are doing printing, which is side-effect by definition.
But even if we compare by the side-effects, they would still be different, even if the sum is the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_left_to_right&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  to_print &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Currently on:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to_print&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (sum, to_print)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_right_to_left&lt;/span&gt;(l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  to_print &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Currently on:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to_print&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (sum, to_print)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we compare them, the results will not be the same (in general):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum_left_to_right(l) != sum_right_to_left(l)        |l| &amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is dandy and all, but what&amp;rsquo;s the use, you may ask?
Well, to answer that, we need to cover one more case of side-effect: mutating variables.&lt;/p&gt;
&lt;p&gt;You may have seen this millions of times:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What this does, is that it &amp;ldquo;creates&amp;rdquo; a variable named &lt;code&gt;x&lt;/code&gt; and assigns it a value of &lt;code&gt;1&lt;/code&gt;.
After that it &lt;em&gt;mutates&lt;/em&gt; its value to &lt;code&gt;x + 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From the mathematical point of view this expression doesn&amp;rsquo;t make sense.
There&amp;rsquo;s no value of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;ℤ&lt;/code&gt;, &lt;code&gt;ℕ&lt;/code&gt;, &lt;code&gt;ℚ&lt;/code&gt;, &lt;code&gt;ℝ&lt;/code&gt; or &lt;code&gt;ℂ&lt;/code&gt; that has this property (except if you do modulo 1, but that&amp;rsquo;s useless).&lt;/p&gt;
&lt;p&gt;The thing is, the ability to freely mutate state is the source of many software bugs.
Of course, you may not believe me, since I don&amp;rsquo;t have enough experience writing software, but if you try to look at it yourself, you&amp;rsquo;ll see that I&amp;rsquo;m right.&lt;/p&gt;
&lt;p&gt;As for me, everytime I am forced to write in Python or any similar languages with hard-to-understand semantics (i.e. you look at the code and have no idea what will happen), I dread inside.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# some value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# x = ???&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The thing is with Python, is that you don&amp;rsquo;t know or can&amp;rsquo;t be sure.
You don&amp;rsquo;t know, and compiler doesn&amp;rsquo;t know either.&lt;/p&gt;
&lt;p&gt;Simple values like &lt;code&gt;int&lt;/code&gt; are passed by value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x): x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same for lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(l): l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(l)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, values inside the list are passed by reference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(l): l[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(l)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t know about you, but this leaves a bad taste in my mouth.&lt;/p&gt;
&lt;p&gt;The reason is that the logic is purely artificial, somebody came up with those rules.
That&amp;rsquo;s exactly the reason you have to do &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; in JavaScript or that Java does &lt;strong&gt;Referential Equality&lt;/strong&gt; instead of &lt;strong&gt;Structural Equality&lt;/strong&gt; (that&amp;rsquo;s the reason you have to write &lt;code&gt;s1.equals(s2)&lt;/code&gt; instead of &lt;code&gt;s1 == s2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The ability to freely mutate state coupled with unintuitive semantics makes &lt;em&gt;reasoning&lt;/em&gt; about programs hard.
Reasoning is the ability to tell if the code is correct or not, especially useful when debugging.&lt;/p&gt;
&lt;p&gt;In fact, humans are really bad with reasoning.
Most of the logical thinking that we do is in the prefrontal cortex, the front of the brain, its highest layers.
Essentially, this part of the brain evolved last and is quite recent.
Forcing that part of the brain to work is quite difficult.
We didn&amp;rsquo;t evolve to solve math problems naturally, compared to breathing uncounciously, for example, that&amp;rsquo;s why math is difficult in general.&lt;/p&gt;
&lt;p&gt;But we have tools to aid us in that.
Here is the tool: &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Looks like&amp;hellip; an assignment?&amp;rdquo; you ask yourself.
No, no, it is not an assignment, it is &lt;em&gt;equality&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The ability to tell that two unrelated things are actually the same opens up a myriad of possibilities.
On a side note, people who keep arguing that &amp;ldquo;you can&amp;rsquo;t understand me&amp;rdquo; or cultural isolutionism or whatever, they are essentially robbing people of the tools necessary to understand the world, but that is a story for another day.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum(angles of triange) = 180°
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we establish an equality.
While it may seem trivial, but it is useful, if you know first two angles, using this equality you can find the third angle:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a + b + c == 180 =&amp;gt; c = 180 - a - b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or take physics for example.
We all may have seen this equation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;F = ma
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Newton&amp;rsquo;s Second law.
When I first saw this, I didn&amp;rsquo;t pay much attention.
Of course, this equation gets introduced in a rather boring context, seemingly no use outside of simple kinematics.&lt;/p&gt;
&lt;p&gt;But take another example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;F = kx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a description of Hooke&amp;rsquo;s law, i.e. what force does the spring exert when displaced by the distance of &lt;code&gt;x&lt;/code&gt;.
Again, what of it?&lt;/p&gt;
&lt;p&gt;See, the &lt;code&gt;=&lt;/code&gt; symbol is actually really powerful.
Because we know that those two equations are basically the same, we can combine them:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;F = ma
F = kx
-------
ma = kx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Seems boring, but with this we can find the answer to a question, &amp;ldquo;What is the acceleration of the object of mass &lt;code&gt;m&lt;/code&gt; attached to a spring with a constant factor of &lt;code&gt;k&lt;/code&gt; and displaced by &lt;code&gt;x&lt;/code&gt; meters?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Just basic algebra and voila!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(ma) / m = (kx) / m =&amp;gt; a = kx / m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now just plug in numbers and find the answer.&lt;/p&gt;
&lt;p&gt;Interestingly, physics is quite &amp;ldquo;functional&amp;rdquo;, in a mathematical sense.
The whole science in general is established on the shoulders of equality, or rather equational reasoning.
By measuring things and comparing them with others or saying that one is equal to another, we establish connections.
And turns out, those connections are quite strong.
So, the next time you&amp;rsquo;re wondering why do you need to learn physics: this is why.
Understand that things are interconnected.
Discover the power of equational reasoning.&lt;/p&gt;
&lt;p&gt;Let us move on.&lt;/p&gt;
&lt;p&gt;Unfortunately, the application of equational reasoning in programming is rather limited.
In the presence of the side-effects it is even impossible:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(&amp;#34;Hello World!&amp;#34;) ??? print(&amp;#34;Goodbye World!&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How do you even compare those things?&lt;/p&gt;
&lt;p&gt;While comparison for those kinds of things is not well defined, we can compare values:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Hello World!&amp;#34; != &amp;#34;Goodbye World!&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Side-effects complicate things, they complicate equational reasoning, they complicate reasoning in general.
And they put implicit restrictions that you can&amp;rsquo;t easily verify:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# some value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g(x)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, back to our example.
Can you tell what this code does?
Can you find a mistake in it?&lt;/p&gt;
&lt;p&gt;Probably not.&lt;/p&gt;
&lt;p&gt;What about this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello filesystem!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g(x)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now do you see the problem?
We are writing to a closed file.
The correct order must be this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello filesystem!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g(x) &lt;span style=&#34;color:#75715e&#34;&gt;# swapped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x) &lt;span style=&#34;color:#75715e&#34;&gt;# places&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was an easy example, but the arbitary invoking of side-effects from virtually anywhere can cause problems even on this scale.
This requires us to read ALL the code to find bugs.
Now you see why the job of software developer is so difficult?
Because you&amp;rsquo;re bad at it.&lt;/p&gt;
&lt;p&gt;If the functions were pure, the order wouldn&amp;rsquo;t be so important, or rather the order of the functions would be &lt;em&gt;explicit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Take this imaginary example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(f(x) + g(x)) * (k(x) - h(x))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All the functions are pure and perform some computations.
It is clear to see that it doesn&amp;rsquo;t matter if we perform &lt;code&gt;f(x)&lt;/code&gt; first or &lt;code&gt;g(x)&lt;/code&gt;, or &lt;code&gt;h(x)&lt;/code&gt; or &lt;code&gt;k(x)&lt;/code&gt;.
However, it is also clear that we must first do &lt;code&gt;f(x) + g(x)&lt;/code&gt; and &lt;code&gt;k(x) - h(x)&lt;/code&gt; before we can multiply them, or that we must perform the computations of the functions if we want to do the addition or the subtraction.&lt;/p&gt;
&lt;p&gt;With pure functions there are only computations, and with computations the order is described by data dependency.&lt;/p&gt;
&lt;p&gt;Data dependency is when you need to calculate &lt;code&gt;y&lt;/code&gt;, but that &lt;code&gt;y&lt;/code&gt; depends on &lt;code&gt;x&lt;/code&gt;, i.e. &lt;code&gt;y = f(x)&lt;/code&gt;.
But if &lt;code&gt;x&lt;/code&gt; depends on some other argument &lt;code&gt;u&lt;/code&gt;, i.e. &lt;code&gt;x = g(u)&lt;/code&gt;, then you get a clear dependency, or an order:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;y = f(g(u))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simple?
Simple.&lt;/p&gt;
&lt;p&gt;Hopefully at this point it is clear why we don&amp;rsquo;t like mutation, because mutation implies state and state complicates our code in many unpredictable ways.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why we as functional programmers tend to use &lt;em&gt;immutable&lt;/em&gt; variables.
In the dicitionary, &lt;code&gt;immutability&lt;/code&gt; is defined as a quality of not changing, staying the same.&lt;/p&gt;
&lt;p&gt;If we take a problem of the form:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x + 3 = y =&amp;gt; x = ?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While there are many values that &lt;code&gt;x&lt;/code&gt; can take, once it is taken, it doesn&amp;rsquo;t change.
That&amp;rsquo;s the beauty of the variables and how they should be used.&lt;/p&gt;
&lt;p&gt;Of course, the question is, how do you write a code with variables that don&amp;rsquo;t change?
Simple, just create a new variable.
And if that variable needs to change, create a new variable for that.&lt;/p&gt;
&lt;p&gt;I know, it will be difficult initially.
But once you start doing it, you&amp;rsquo;ll notice it that since your variables are immutable, it becomes easy to &lt;em&gt;reason&lt;/em&gt; about the program.&lt;/p&gt;
&lt;p&gt;So, at this point, we are ready to cut-off our first part of the intro into functional programming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use pure functions&lt;/li&gt;
&lt;li&gt;Fuctions that do side-effects are impure&lt;/li&gt;
&lt;li&gt;Impure function called inside pure function makes pure function impure&lt;/li&gt;
&lt;li&gt;Use immutable variables&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t read from global variables&lt;/li&gt;
&lt;li&gt;Pass all variables used through input arguments to make function pure&lt;/li&gt;
&lt;li&gt;If side-effects are not observable from outside, the function is pure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if you don&amp;rsquo;t progress further than this, if you just do those when you can, you&amp;rsquo;ll already see the benefit.
That&amp;rsquo;s how I started my journey into functional programming.
With a small step.
It&amp;rsquo;s fine if it will be your only step.&lt;/p&gt;
&lt;p&gt;And for those who are still onboard, let us move on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part I&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-ii/&#34;&gt;Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ktlthebest.github.io/posts/so-you-want-to-fp-iii/&#34;&gt;Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>How and Why It Took Me One Year to Start Coding in FP Language</title>
      <link>/posts/how-and-why-fp/</link>
      <pubDate>Fri, 12 Jan 2024 03:27:42 +0900</pubDate>
      
      <guid>/posts/how-and-why-fp/</guid>
      <description>Intro You know, since I accidentially discovered Functional Programming due to being a Security Analyst at a time (and realizing how shitty our software practices are to allow many severe vulnerabilities into production due to C&amp;rsquo;s nonexistent memory safety), I was a hard proponent, or a more fancy word they call us, an evangelist of FP (but that is a topic of its own).
Of course, when I try to do that, I get a massive pushback from people:</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;You know, since I accidentially discovered Functional Programming due to being a Security Analyst at a time (and realizing how shitty our software practices are to allow many severe vulnerabilities into production &lt;del&gt;due to C&amp;rsquo;s nonexistent memory safety&lt;/del&gt;), I was a hard proponent, or a more fancy word they call us, an evangelist of FP (but that is a topic of its own).&lt;/p&gt;
&lt;p&gt;Of course, when I try to do that, I get a massive pushback from people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the research in my University among Master&amp;rsquo;s students done in on AI (but mostly ML/DL)&lt;/li&gt;
&lt;li&gt;There are less people in my FP lab than the fingers on my hands (and 30% of them will graduate in couple of months)&lt;/li&gt;
&lt;li&gt;People generate even more Python code than before (thanks to all the LLMs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I asked myself a question every (remotely sane) person would ask at this point: &amp;ldquo;Why?&amp;rdquo;.
But again, the answer is still somewhat out there.
What happened, however, is that I started to look inwards in search of the answer (because Universe won&amp;rsquo;t answer my calls).
What happened is that I realized that all the &amp;ldquo;5 stages™&amp;rdquo; that FP caused me, I successfully blocked out all the memories to be able to go on with my life.
And now, when I am all &lt;del&gt;crippled&lt;/del&gt; adjusted to my new life, I am pushing people into doing things they don&amp;rsquo;t like and surprised when I&amp;rsquo;m getting pushback even though it took me a whole year of forcing myself literally my every free and concious moment to internalize FP ideology (because you see, I&amp;rsquo;m &lt;del&gt;a masochist&lt;/del&gt; curious).&lt;/p&gt;
&lt;p&gt;So in this post we will go into my obviously objective, accurate and comprehensible account of one year that I was subjecting myself to learn FP starting from discovery until I was able to start to write my first lines of code in OCaml.&lt;/p&gt;
&lt;h1 id=&#34;discovery&#34;&gt;Discovery&lt;/h1&gt;
&lt;p&gt;As I said, it was purely accidential.
I am one of those people who use Incognito mode to browse internet because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn&amp;rsquo;t clutter history with random shit that I visit&lt;/li&gt;
&lt;li&gt;Drops all the unnecessary personalized cookies&lt;/li&gt;
&lt;li&gt;Yields sane recommendations on YouTube (or at least used to, before I switched on DistractionFree YouTube)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I was sometimes recommended a video from Richard Feldman on why Functional Programming Languages™ are not popular and one time I gave in and decided to watch it.
Needless to say, I didn&amp;rsquo;t understand anything of what he said the first time, because C and Python obviously have functions, duh, what are you talking about.&lt;/p&gt;
&lt;p&gt;The next two things happened accidentially, I guess.
I was in my last year of the undergraduate studies and we had to make a Senior project.
In a university where most of the staff are ML-researchers and most students just want to graduate at this point and take simple web-development projects, I decided to make a world a better place&amp;hellip; and design a compiler for a toy language that won&amp;rsquo;t be used by anyone, not even me.&lt;/p&gt;
&lt;p&gt;I always had a fascination by compilers that I can&amp;rsquo;t explain why.
On my first year of undergraduate I asked the question of how to develop a programming language (to a professor who turns out to be specializes in compilers and all the mathematical stuff).
He probably thought that I was just not serious and gave me a simple answer like try researching it on your own or watch YouTube, but that I can do it if I really want it (or something of the sorts, but I remember that I didn&amp;rsquo;t get any answer).
I started watching some random YouTube video on how to build my own programming language, and didn&amp;rsquo;t understand a thing.
I also had a course where we had to code in MIPS assembly and most of the students struggled.
I had a genius idea of developing a compiler that generates a MIPS assembly from C language, but I didn&amp;rsquo;t know how to put the idea into words and so by the time it didn&amp;rsquo;t take off the ground, the course ended (maybe I should do it on some weekend, seems like a simple project tbh).
So yeah, I had some interest in compilers.&lt;/p&gt;
&lt;p&gt;Some years into the future, I&amp;rsquo;m working as a Cyber Security Analyst, trying to make sense of what is happening for the last couple of years.
And by chance I discover that there&amp;rsquo;s actually a programming language that avoids all the security pitfalls of C.
&amp;ldquo;Oh wow, sounds like science-fiction!&amp;rdquo; I thought to myself.
I couldn&amp;rsquo;t believe it, since if it was true, why wouldn&amp;rsquo;t people code in it more often?
Turns out they do, but being good and being popular are not the same, or so it seems.
And so, I tell about this fancy programming language Rust to my Senior-project teammate.
&amp;ldquo;Rust? Duh, I know about it&amp;rdquo;, was kinda his reaction.
He is really smart and also codes in PHP in his fulltime job (while being senior student) because it was a really good deal in terms of $/h.
He is really smart.
And so, I am inspired to develop a new compiler with a borrow checker for a Senior Project.
Being dumb is what motivated me to make those kinds of claims.
I&amp;rsquo;m kinda envious of that stupid guy.
We have a saying that even an ocean is a knee-deep if you&amp;rsquo;re fool or drunk.
But my professor had to fight me on that one constantly, and I retaliated back.
Turns out, sometimes professors are correct.
We cut out half of the stuff that I proposed (the borrow checker was the first to go) and we barely managed the project on time.
If it wasn&amp;rsquo;t for our smart teammate, we wouldn&amp;rsquo;t have made it.
We were coding in C++, and I was tired of a state-management in code generation.
My lack of high-level view and deep understanding of what was going on didn&amp;rsquo;t help me either.
So I was trying to do my best to close the gaps as soon as possible.
Accidentially found out about book &amp;ldquo;Modern Compiler Implementation in ML&amp;rdquo; (far better book than &amp;ldquo;Dragon&amp;rdquo; for newbies).
This was my first encounter with &lt;del&gt;proper&lt;/del&gt; ML.&lt;/p&gt;
&lt;p&gt;And now, with all the ideas of Rust and ML and compilers, I stumble back to the Richard Feldman&amp;rsquo;s video without realizing how all the things are interconnected.
In hindsight, it is really surprising that the things that seem remote are actually interconnected: I mean security, some esoteric programming language and the art of developing compilers.
Don&amp;rsquo;t you think so or are you just too smart?&lt;/p&gt;
&lt;p&gt;And so, after the video I started to (somehow) discover that Functional Programming is (another) thing that can prevent security issues.
Ain&amp;rsquo;t it perfect?!
And so I start to read different blogs posts on it, trying to wrap my head around it.
They all keep talking about functions (duh), about the importance of &amp;ldquo;immutability&amp;rdquo; (I&amp;rsquo;ll be honest, that&amp;rsquo;s when I first learned the meaning of the word), but also about some languages like OCaml, Haskell and Lisp.
The thing is, when you&amp;rsquo;re a beginner and pretending to be smart, you&amp;rsquo;re trying to wrap your head around many things and they don&amp;rsquo;t make sense initially.
Heck, they don&amp;rsquo;t make sense even after you start using them.
You can make a whole academic career from from researching types alone.
And so, I was lost, which brings us to the next part&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;pain-and-suffering&#34;&gt;Pain and Suffering&lt;/h1&gt;
&lt;p&gt;Instead of being a normal person and forgetting all this nonsense as a bad fever dream, I started to research this in my free time.
Blog posts was a mistake, so I switched to YouTube videos and books.
Turns out there aren&amp;rsquo;t as many books on FP as on, say, Python.
And videos also differ their content, length and quality.
But the thing is that the materials are scarce, so when you start searching for them, you&amp;rsquo;ll start seeing the same videos and books over and over again (unless you go onto some real books which are pre-2000).
And so, you&amp;rsquo;re forced to work with what you&amp;rsquo;re given and try to actually listen and understand what people are saying.
The first thing that stands out, is that you can&amp;rsquo;t actually dumb your way through FP, like you did in, say, Python.
You actually have to think about what is being told, what is not told, what are the implications of what being said and most importantly, how to put it into practice.
Math people are good at this, but they tend to overestimate other people&amp;rsquo;s capabilities and make a grave mistake thinking that we understand them.&lt;/p&gt;
&lt;p&gt;I really liked NDC Conference videos on FP.
Surprisingly, they have a lot of them and they are actually really good.
I liked Scott Wlaschin&amp;rsquo;s videos on FP and F# (but mostly FP).
13 ways to program a turle, domain-driven development with F# and railway-oriented programming, those are nice things.
But even when the &amp;ldquo;railway-oriented&amp;rdquo; sounds way nicer than &amp;ldquo;monads&amp;rdquo;, it still took me some time to understand what is being said (and I guess some initial practice was crucial in that).
Actually, because of Scott Wlaschin (and because I couldn&amp;rsquo;t figure out how to install and run other tools) I decided to go with F#.&lt;/p&gt;
&lt;p&gt;The problem with FP is that you can basically do FP in anything, even in assembly (with much effort and dedication).
In OOP it is also kinda the same, but when you learn one language, you basically learn them all, and they start to look the same to you.
FP languages are also kinda the same, but to see that, you need to learn lambda-calculus.
You see, the bar is kinda high in this case.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re given all the choices among the different languages like Lisp, Haskell, OCaml, F#, Erlang, Elixir, Scala and just so many more that I&amp;rsquo;m lazy to list, as a newbie you just REALLY start wondering where you should start.
Oh, and there&amp;rsquo;s like Common Lisp and then there&amp;rsquo;s Scheme (and there are constant sophisticated debates on which is better which don&amp;rsquo;t really answer the question with which it is better to begin).
Oh, and then there are like 20+ dialects, compilers and interpreters of Common Lisp (don&amp;rsquo;t quote me on that, I&amp;rsquo;m too lazy to count the variants of CL-compliant Lisps).
Oh, there&amp;rsquo;s also OCaml and Standard-ML (among which there are many different versions by different universities, but don&amp;rsquo;t worry, you won&amp;rsquo;t code in any of them :D)
Erlang, Elixir, quite self-explanatory &lt;del&gt;go with Elixir&lt;/del&gt;.
Haskell is kinda standalone, but then there&amp;rsquo;s PureScript and around 2000-pages book on learning FP along with PureScript.
F# is basically an OCaml for .NET.
Scala is said to be nice language, but then again, I can&amp;rsquo;t say it is a pure FP.
I&amp;rsquo;m sorry, I detest objects and try to avoid them (even in OCaml).&lt;/p&gt;
&lt;p&gt;So yeah, all those languages are kinda the same, but when you&amp;rsquo;re just a beginner, it doesn&amp;rsquo;t seem so and the choices seem overwhelming and pundit and pretentious discussions on HN don&amp;rsquo;t really help newbies.
So because of Scott Wlaschin I decided to go with F#.
Man, it was a mistake.
By a pure chance I managed to install the SDK and randomly setup *.fsproj.
But I wanted to learn FP, not .NET, goddamnit.
And that&amp;rsquo;s kinda another problem with all the FP languages: they work by some internal logic that developers came up with, and will work in a specific way only and you need to be aware of that &lt;del&gt;or fuck off&lt;/del&gt; read some (nonexistant) documentation.
FP really has made it so only smart people can successfully navigate it, huh?
Needless to say, I never went back to F#.&lt;/p&gt;
&lt;p&gt;Scott Wlaschin is great when you have some basics and know what you&amp;rsquo;re looking for.
But as a beginner, what had a great impact on me is the video on &amp;ldquo;Approaching problems as a Functional Programmer&amp;rdquo; or something.
While I didn&amp;rsquo;t understand the first half, the second half was a demo on how to change the mess of JavaScript code into something beautiful.
What he did was actually quite simple, he made all the functions pure by repeating the same logic over and over.
But when you&amp;rsquo;re seeing it for the first time, it felt like witnessing a magic trick: you like it and can&amp;rsquo;t get enough.
It also fuels your motivation to learn the secret.
And so I decided to repeat the experience.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t know JavaScript good enough, so I decided to go with Python.
At this point I discovered Coconut, a programming language that is superset of Python and is functional.
I liked the idea.
Except it was a bad idea.
The main thing that holds Coconut back is documentation and development tools.
Again, the same problem, I was trying to learn FP, not Coconut.
And so, I had to bid Coconut a goodbye, but it was a (somewhat) pleasing experience for a first time since trying to learn FP.
Then there was Hy, but I guess I don&amp;rsquo;t like brackets, I&amp;rsquo;m sorry.&lt;/p&gt;
&lt;p&gt;And so, no more excuses.
Me, Python and FP.
So, what do I do now?&lt;/p&gt;
&lt;p&gt;I started small.
Not because I was afraid, but because I couldn&amp;rsquo;t do much.
I was still dependent on mutation, local state and for-loops instead of functional counterparts.
Somehow, the most difficult part was to make that shift in paradigm, to approach problems from a new angle.
When you look back, you realize it wasn&amp;rsquo;t so difficult.
But it was hard.
It was simple, but it wasn&amp;rsquo;t easy.
That is a subtle, but important difference.
Additionally, when you come back to Python, you&amp;rsquo;ll notice that many modules actually encourage mutating and imperative styles, sometimes it is the ONLY way to do things.
Surprisingly, I liked &lt;code&gt;pyplot&lt;/code&gt; a lot, because it was declarative and it made sense after all the FP and logic background.&lt;/p&gt;
&lt;p&gt;Slowly, I started to make more and more in functional style.
I started to make state explicit via input arguments.
I started making more functions for each small thing (my friends still say that I&amp;rsquo;m overkilling it).
I started to use recursion, pattern matching, higher-order functions, lambdas and list-comprehensions where I could.
I started to decompose problems into smaller, easier problems and started to make my code more modular and more testable.
One of the joys was figuring out that I can use Python&amp;rsquo;s built-in lists as a configuration DSL (and get code-highlight and formatting for free!).
But the best thing, of course, is that the idea worked.
It matched the problem I was trying to solve so naturally, I couldn&amp;rsquo;t believe it.
I wanted to share my joy with others and started to become a proponent of Functional Programming (much to annoyance of my colleagues and friends) without actually understanding what it is.&lt;/p&gt;
&lt;p&gt;Of course, trying it out in Python helped me to deepen and practice lessons learned from FP.
Also, the book &amp;ldquo;Grokking Functional Programming&amp;rdquo; is a real godsend.
Maybe we should recommend it to anyone starting out in FP?&lt;/p&gt;
&lt;p&gt;At some point however, I started be constrained by the language.
Needless to say, Python is not suited for Functional Programming.
You can do it, but with much effort, and when you do, you get unpythonic code.
You also get punished by slow performance and heavy memory usage.
Oh, and there are unintended side-effects like unclear scopes, variable shadowing and passing references instead of copies.
Oh, and Guido was against lambdas initially.
To the point that people started to hack-in lambdas with macros and whatnot.
Man, I learned more about Python while trying to learn FP than in all the years prior.
I started to hate Python.
I now see that all the mistakes that I make and that prevented me from seeing the functional paradigm, it was because of deliberate design choices of Python.
Python must burn, in my opinion, somewhere deep in hell.
But most importantly, it had to go.&lt;/p&gt;
&lt;p&gt;Which brings me to the next topic&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;crossing-the-bridge&#34;&gt;Crossing the bridge&lt;/h1&gt;
&lt;p&gt;At this point I was dismayed.
I wanted to do FP.
I saw the potential.
But I was held back by my lack of skill.
The only languages I knew where C++ and Python, and I knew Python better than C++.
And I also was still a Cyber Security Analyst: solving real problems comes first, FP and abstract problems second.
I was watching all the videos on YouTube, of people giving talks about how they use those FP languages and neatly solve all their problems.
I wanted to do the same, just like them.
And so I was searching for ways to integrate those languages at my job.
Nobody was in support of that.
Looking back, I see why (I also see that if we did, it may be a better thing in a long term, but again, another topic for another day).
Needless to say, it was disheartening.
But I was still trying.
I was trying to give presentations on FP stuff that I recently learned in hopes to: 1) teach some of it to my colleagues, 2) better understand it myself.
I once made a grave mistake of trying to explain functors and monads to colleagues.
But it was fun seeing their attention slowly drifting away.
Kinda.&lt;/p&gt;
&lt;p&gt;In the end, I knew that I had to do it myself.
I have to be the proponent of change that I want to see.
I must learn those languages myself and code in them myself.
But to do that, I need to decide on the language to learn.
And so back to the drawing board.
With my &amp;ldquo;aquired taste&amp;rdquo; for FP I could better appreciate all the benefits of different FP languages and they were asking in return (not really, but it was nice to have less fog in your head, you know?).
Still, I couldn&amp;rsquo;t decide.
And so I made an obvious decision: why not learn them all?&lt;/p&gt;
&lt;p&gt;And so, I was now reading many books about different languages.
It is a funny experience in itself.
You start to notice many ways in which the languages are similar, but then the quirks and design choices start to become more apparent.&lt;/p&gt;
&lt;p&gt;But what happened next was even more surprising: languages started to fall off on their own.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scala was first to go (partially to some resemblence to Python syntax, but mainly OOP).
I was trying to learn FP.&lt;/li&gt;
&lt;li&gt;Elixir and Erlang: I didn&amp;rsquo;t want to go through dynamic typing again.&lt;/li&gt;
&lt;li&gt;Lisp: brackets were too much.&lt;/li&gt;
&lt;li&gt;F#: I tried toying with it a bit, but I still couldn&amp;rsquo;t become friends with .NET&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The choices were shrinking, which is good, but also scary: what if I won&amp;rsquo;t like any of the languages left?
There are mainly two options here: Haskell and OCaml.&lt;/p&gt;
&lt;p&gt;Haskell is regarded as a big daddy of Functional Programming, which I think is sad.
Haskell has many design choices that require experience and deliberate understanding to appreciate them, and even then not all of the choices are good.
But most importantly is that it&amp;rsquo;s hard for beginners.
I thought it was a meme that &amp;ldquo;Hello World&amp;rdquo; in Haskell comes in the last 20% of Haskell books, until I saw it myself.
I think people who like Haskell can&amp;rsquo;t really write books: most of them are about list manipulations and functors.
Writing a beginner-friendly book about Haskell is one of my dream goals.&lt;/p&gt;
&lt;p&gt;And so, I decided to try OCaml.
Before I started to look into it, I thought that OCaml was a dead language: it has even less lines of code than Haskell, which I thought was also a useless language that no-one considers seriously.
I thought that OCaml has a bad ecosystem (which it does, compared to JS/Python/Haskell).
I couldn&amp;rsquo;t install the SDK properly (&lt;code&gt;opam&lt;/code&gt; is opionated and won&amp;rsquo;t work in other terminal sessions unless you do &lt;code&gt;eval $(opam env)&lt;/code&gt;).
Also, I didn&amp;rsquo;t know how to compile and build projects in OCaml.
I literally had to ask ChatGPT how to do that, and thankfully it helped with &lt;code&gt;dune&lt;/code&gt; and &lt;code&gt;ocamlbuild&lt;/code&gt;.
I like &lt;code&gt;ocamlbuild&lt;/code&gt; more, but its documentation could be WAY better.
&lt;code&gt;dune&lt;/code&gt; I really don&amp;rsquo;t like.
Maybe I&amp;rsquo;ll write my own build system, who knows.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t like the fact that writing OCaml without LSP is really difficult: all the high-load goes onto developer instead of the computer.
Turns out, this is something that you have to get used to (or install VSCode (which I also don&amp;rsquo;t like), and use Dune, (which I like even less), if you want to get that nice LSP support).
Editor support could be way better.
As a compromise, I&amp;rsquo;ve settled with Emacs for now, although I&amp;rsquo;m using doom-emacs, mainly because of vim-bindings (this text was written in vanilla vim btw).&lt;/p&gt;
&lt;p&gt;Writing code in OCaml is a challenge in its own.
The first thing that was throwing me off (or ocamlbuild) is that you need &lt;code&gt;in&lt;/code&gt; for every local &lt;code&gt;let&lt;/code&gt; binding.
I didn&amp;rsquo;t understand why, since in F# I didn&amp;rsquo;t need to do that.
At first it was a drag, although with time I started to appreciate that aspect of OCaml and wouldn&amp;rsquo;t want to have it any other way now.
Another problem is that you often don&amp;rsquo;t know what to write and how to write.
Writing in OCaml is kinda like art.
If you don&amp;rsquo;t know what you&amp;rsquo;re writing, then what you&amp;rsquo;re writing is bad, and it shows really quickly.
I&amp;rsquo;m currently solving 99 problems in OCaml.
While I think that my code is nice, there is some guy that has way more succinct code.
It is eye-opening to see many ways in which one can write OCaml.&lt;/p&gt;
&lt;p&gt;And this is another problem: all of this sounds easy, but it actually took me a long time to learn about OCaml before I could start writing my first lines of code.
I literally finished &amp;ldquo;Real World OCaml&amp;rdquo; from beginning to end to see all there is to see about the language.
What was nice about the Python is that with some minimal knowledge you can start writing some useful code or be able to read parts of others&amp;rsquo; codes.
It&amp;rsquo;s not the case with OCaml.
For me I had to see all the parts of OCaml and how they fit together.
It took me a whole book to realize that OCaml is just a lambda-calculus with ergonomics.
But then there&amp;rsquo;s a module system.
Module system is used to solve problems you never knew existed.
Why the hell do I need to write&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IntMap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.&lt;span style=&#34;color:#a6e22e&#34;&gt;Make&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; compare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compare &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;when in F# I can write&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IntMap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that there&amp;rsquo;s a difference between &lt;code&gt;module Foo&lt;/code&gt; and &lt;code&gt;module type Foo&lt;/code&gt; and I couldn&amp;rsquo;t understand why compiler is unhappy.
And why every file name must be unique and how actually structure the project.
And why you don&amp;rsquo;t actually need to import modules that you want to use.
You&amp;rsquo;re actually interacting with module system right away and it shapes the way you approach OCaml, in one way or another.&lt;/p&gt;
&lt;p&gt;What I don&amp;rsquo;t like about all the FP stuff, is that you have all this upfront cost that you need to pay before you can actually start learning and do something useful.
I think it can be improved in many ways.
Our ecosystem could be way better.
And then there are misconceptions about our community.
But some of them are on point.
I mean, you&amp;rsquo;re thinking whether you should learn Haskell and then some guy shows off how he implemented factorial and fibonacci sequence in Haskell type system.
I mean, do we really need to scare newbies?&lt;/p&gt;
&lt;p&gt;But then again, there&amp;rsquo;s also a OCaml&amp;rsquo;s younger, but much more difficult brother - Coq.
I&amp;rsquo;ll get to him someday.
Eventually.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There aren&amp;rsquo;t many conclusions to make, other than that learning FP is hard by design.
Some obstacles are artificial, while others are inherent.
What I showed you was just my way of how I got here.&lt;/p&gt;
&lt;p&gt;The sad part about this all is that I can&amp;rsquo;t walk this path twice.
Despite my gruelling and whinning, this experience was also really fun.
It was a joy to discover new things and understand how world operates on a different level.
I somehow stuck through the difficult storms and now I&amp;rsquo;m on the outskirts of the the world, in the barren lands where I&amp;rsquo;m free to build my kingdom or help others and few survivors who happen to share the similar mindset as me.
This is nice in its own way.&lt;/p&gt;
&lt;p&gt;I also learned that sometimes the only way to do difficult stuff is by just doing it.
Sometimes there&amp;rsquo;s no other way.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re reading this in hopes of learning FP or deciding if you should learn it: good luck.
It will be worth it.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>So You Want to Ocaml</title>
      <link>/posts/so-you-want-to-ocaml/</link>
      <pubDate>Wed, 20 Sep 2023 17:24:15 +0900</pubDate>
      
      <guid>/posts/so-you-want-to-ocaml/</guid>
      <description>Introduction So, you might have heard that there&amp;rsquo;s a language called OCaml, and that it is one of the affordable ways of getting into Functional Programming (the other one being F#, but that is a topic for another day).
Pros of OCaml OCaml is a really good language. There&amp;rsquo;s a saying that being copied is one of the best compliments that artist can get. Apparently for the programming language it is the same.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;So, you might have heard that there&amp;rsquo;s a language called OCaml, and that it is one of the affordable ways of getting into Functional Programming (the other one being F#, but that is a topic for another day).&lt;/p&gt;
&lt;h2 id=&#34;pros-of-ocaml&#34;&gt;Pros of OCaml&lt;/h2&gt;
&lt;p&gt;OCaml is a really good language.
There&amp;rsquo;s a saying that being copied is one of the best compliments that artist can get.
Apparently for the programming language it is the same.
Or not?&lt;/p&gt;
&lt;p&gt;OCaml is imitated by many other languages constantly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;F#&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Haskell (to some extent)&lt;/li&gt;
&lt;li&gt;ReScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OCaml is one of the ML-family languages (with ALGOL and Lisp being the other ones).
OCaml is such a prominent influence on the programming world, even if its influence is not easily observable.
The initial version of React was written in OCaml.
The ideas of React come from Functional Programming, in part of OCaml, because Jordan Walke was exposed to OCaml in large quantities.
If radioactive-ocaml-compiler bites you, you can instantly get better at OCaml and functional programming, or so they say.
The initial version of Rust was written in OCaml, before becoming self-hosted.
There are many tools and languages that were built in OCaml.&lt;/p&gt;
&lt;h2 id=&#34;addressing-the-elephant&#34;&gt;Addressing the elephant&amp;hellip;&lt;/h2&gt;
&lt;p&gt;But if the OCaml is such a nice language, why is it not as popular as Rust, for example?
And that is a valid question.
The answer is not as simple.
There are many myths surrounding the OCaml, while some gripes with the language are true.
Sometimes things that people say about the language are blatantly wrong, but sometimes the defense of the language sounds like a high-concentration copium.
People believe that the functional programming is &amp;ldquo;useless&amp;rdquo; in a sense that no real software can be written in it, other than compilers, and that OCaml&amp;rsquo;s niche is relegated to that of hobby pet-projects.
When you say that it is not the case, you are asked to show the examples of the working software that is popular and widespread (other than Jane Street).
At that moment you say that not many people code in OCaml, and as such, we don&amp;rsquo;t have much to show, compared to the same Python.
Less people code in OCaml, less projects in OCaml, less recognition of OCaml, and as such even less people learn about OCaml.
A vicious cycle.
Sure, it sounds like a copium.&lt;/p&gt;
&lt;p&gt;But then again, there are genuine problems of the language that are not addressed by the mainstream user of the OCaml.
OCaml tends to attract people who are curious and up for a challenge.
As such, being able to run OCaml is a part of initiation ceremony.
A test, so to speak.
At least that&amp;rsquo;s how it may be regarded by others, and maybe that&amp;rsquo;s why there&amp;rsquo;s nothing been done about it.
As such, they tend to detract average people who are curious, but don&amp;rsquo;t want to spend their precious weekend to figure out what the hell is going on.
On top of being able to successfully setup the environment, one must learn about functional programming.
This is a task for several weekends.
Ain&amp;rsquo;t no way average people are going to put up with all of the bullying.&lt;/p&gt;
&lt;p&gt;The reason Rust doesn&amp;rsquo;t fail as much, is because Rust is more friendly.
Syntax is familiar to C/C++ developers.
Rust allows you to write shitty mutable imperative code if you want to.
Of course there&amp;rsquo;s borrow checker, but for simple introductionary examples it works.
And that is the most important moment to hook people up.
Setting up Rust is super easy.
One command and it works.
One compiler.
Familiar executables as an output.
Support for IDE and LSPs.
Cargo is also fine.
There&amp;rsquo;s no ambiguity on what to use and what to do.
You have an idea and you just think about how to describe it in code.
With OCaml it is different.&lt;/p&gt;
&lt;p&gt;I must confess&amp;hellip; It took me a year to get from reading my first book on OCaml to actually starting to write code.
I don&amp;rsquo;t know why it must have been this way, but it was a running joke that I couldn&amp;rsquo;t figure out how to run the tools properly.
I read books trying to figure it out.
But I never found out.
Maybe I read books wrongly.
But then again, I never had the same problem with Rust.
The only way when I was able to make my first program in OCaml for the first time is with the help of ChatGPT.
I asked it how to build OCaml program and it gave me some options.
Must I say that it doesn&amp;rsquo;t know nearly as much about OCaml and after some time the answers were useless.
But at least I was able to finally code.
After that I started to do something I really didn&amp;rsquo;t want to do: reading the docs.
Not only that, I started reading other people&amp;rsquo;s code in OCaml to see what I was doing wrong.
Maybe some people get off of it, but I don&amp;rsquo;t.
Again, why can&amp;rsquo;t the answer be on the surface as with many Python questions on StackOverflow?
Man, I hate Python&amp;hellip;&lt;/p&gt;
&lt;p&gt;Anyhow, the onboarding process of OCaml is a real problem, and it is a problem that I am going to explain how to solve today.
My answer is FAR-FAR-FAR from perfect.
But it is a start.
It is a necessary building step that hopefully sets you off on your OCaml journey so that you can discover things by yourself.&lt;/p&gt;
&lt;h2 id=&#34;installing-and-running-ocaml&#34;&gt;Installing and Running OCaml&lt;/h2&gt;
&lt;p&gt;First, we need to install &lt;code&gt;opam&lt;/code&gt;.
Opam is a package manager for OCaml, just like &lt;code&gt;pip&lt;/code&gt; for Python, but a bit more involved.
Opam is nice, because it can do so many things for you, like setting up specific version of OCaml.
But because it wants to do so much, it tries to do as much and if you don&amp;rsquo;t invoke correct way, you are screwed.
And don&amp;rsquo;t bother building opam from sources, because you&amp;rsquo;re probably going to be missing some dependencies.
It&amp;rsquo;s simpler to install it using package manager.&lt;/p&gt;
&lt;p&gt;In case of Fedora:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo dnf install opam
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is going to install some dependencies, like OCaml, but opam is going to do a lot of its own things, so it doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;Now, you installed opam, you think it works?
Try installing &lt;code&gt;ocaml-lsp-server&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;opam install ocaml-lsp-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point it should show you some message like &amp;ldquo;You must run this command!&amp;rdquo;.
Run this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;opam init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will show you dialogues.
Do as you want, but I decided to change &lt;code&gt;.bash_profile&lt;/code&gt;, so I said &amp;ldquo;yes&amp;rdquo;.
After that you think you&amp;rsquo;re done? Wrong!
Run this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eval $(opam config env)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&amp;rsquo;t know why, but you won&amp;rsquo;t be able to find executables downloaded by opam, like &lt;code&gt;dune&lt;/code&gt;, without this command.
Now, we are coming to our crucial part: how do you invoke compiler?
I mean there are several executables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ocaml&lt;/li&gt;
&lt;li&gt;ocamlc&lt;/li&gt;
&lt;li&gt;ocamlopt&lt;/li&gt;
&lt;li&gt;ocamlfind&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, my dear, you usually don&amp;rsquo;t.
You are supposed to use a build system.
Man, I hate it when the building process is so involved, when all I want is just an executable.
Where are my lovely &lt;code&gt;python script.py&lt;/code&gt; and &lt;code&gt;gcc main.c&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The way you are going to build things depends on how big your project is and whether you want sane but heavy support of an IDE and LSP or if some vim with basic highlighting and compiling from another terminal window is enough.&lt;/p&gt;
&lt;p&gt;If you just want to write simple scripts and don&amp;rsquo;t have much dependencies, you can use &lt;code&gt;ocamlbuild&lt;/code&gt;.
I personally like &lt;code&gt;ocamlbuild&lt;/code&gt;, because it is very smart: it has internal solver that decides what files to compile, by looking at whether the code is used or not.
Consider it a &lt;code&gt;make&lt;/code&gt; but on steroids, no need to write &lt;code&gt;Makefile&lt;/code&gt; yourself.&lt;/p&gt;
&lt;p&gt;There are two ways to invoke ocamlbuild&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ocamlbuild main.native &lt;span style=&#34;color:#75715e&#34;&gt;# first way&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ocamlbuild main.byte   &lt;span style=&#34;color:#75715e&#34;&gt;# second way&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is the differnce you ask?
Well, you see, OCaml can build native binaries like C and C++ do.
Binaries that work on your CPU.
But then there&amp;rsquo;s also an OCaml VM.
OCaml can generate the bytecode for that VM.
Why, do you ask?
Well, the bytecode version is indeed slower, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is smaller in size&lt;/li&gt;
&lt;li&gt;It is portable, like Java&lt;/li&gt;
&lt;li&gt;You can do proper debugging, unlike with native version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to add some dependencies to your program, you can do so with ocamlbuild, but I forgot how.
Please google a solution for specific lib, I believe there must be one.&lt;/p&gt;
&lt;p&gt;So, another way to build things is &lt;code&gt;dune&lt;/code&gt;.
Many people use &lt;code&gt;dune&lt;/code&gt;, because it plays nicely with LSP and IDE.
If you have an external dependency, dune manages that for you, and doesn&amp;rsquo;t confuse the LSP with &lt;code&gt;Unbound value&lt;/code&gt; errors.
If it weren&amp;rsquo;t for that, I would be using ocamlbuild on a daily basis.&lt;/p&gt;
&lt;p&gt;Also, if you believe that dune&amp;rsquo;s documentation sucks, you&amp;rsquo;re not alone.
To initiate a project:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dune init proj project_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates the following project:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;project_name/
├── dune-project
├── test
│   ├── dune
│   └── project_name.ml
├── lib
│   └── dune
├── bin
│   ├── dune
│   └── main.ml
└── project_name.opam
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;test&lt;/code&gt; is where the tests go, &lt;code&gt;bin&lt;/code&gt; is where you put your &lt;code&gt;main.ml&lt;/code&gt;, and &lt;code&gt;lib&lt;/code&gt; is where your main code goes.
&lt;code&gt;main.ml&lt;/code&gt; is essentially used to call the code from the &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main configuration goes into &lt;code&gt;dune&lt;/code&gt; files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(executable &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(library &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;public_name&lt;/code&gt; parameters that are pertinent to &lt;code&gt;library&lt;/code&gt; configuration. Not sure which one is used for finding the library, so I keep them the same.
When writing a configuration for &lt;code&gt;executable&lt;/code&gt;, you need to tell dune to use your library that you are working on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(exectuable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (public_name project_name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (name main)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (libraries project_name))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s the most important part about configuring dune.
After that you can call dune:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dune build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And execute your binary:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dune exec bin/main.exe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At least that&amp;rsquo;s how I do it.&lt;/p&gt;
&lt;p&gt;Now, for the LSP and stuff.
So far I was able to setup VSCodium only.
Download the binary from the Github, make sure it is not from flatpak.
Flatpak tends to isolate packages.
Because of that VSCodium won&amp;rsquo;t find your LSP.
Or OCaml and dune for that matter.&lt;/p&gt;
&lt;p&gt;Go to extensions and download &lt;code&gt;OCaml Platform&lt;/code&gt;.
After installing make sure that the &lt;code&gt;ocaml-lsp-server&lt;/code&gt; is installed.
VSCodium may also ask you to install &lt;code&gt;ocamlformat&lt;/code&gt;.
Be a sport.
After that you should be able to have a working environment.
And if sometimes LSP doesn&amp;rsquo;t work as expected, try restarting the server (Ctrl+P -&amp;gt; &amp;ldquo;OCaml restart&amp;rdquo;), doing &lt;code&gt;dune build&lt;/code&gt;, and making sure your &lt;code&gt;*.mli&lt;/code&gt; files didn&amp;rsquo;t hide the important functions or types.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for installing and setting up.
As to how to work with OCaml, that is a topic for another day.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
